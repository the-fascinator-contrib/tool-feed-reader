/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 29/04/10 2:21 PM
 */
package au.edu.usq.fascinator.contrib.feedreader.vocabulary.nie;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.CardinalityException;
import org.ontoware.rdfreactor.runtime.RDFDataException;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>CharacterSet</li>
 * <li>Comment</li>
 * <li>ContentCreated</li>
 * <li>ContentLastModified</li>
 * <li>ContentSize</li>
 * <li>Description</li>
 * <li>Generator</li>
 * <li>GeneratorOption</li>
 * <li>HasLogicalPart</li>
 * <li>HasPart</li>
 * <li>InformationElementDate</li>
 * <li>IsLogicalPartOf</li>
 * <li>IsStoredAs</li>
 * <li>Keyword</li>
 * <li>Legal</li>
 * <li>Links</li>
 * <li>MimeType</li>
 * <li>NieIdentifier</li>
 * <li>NieLanguage</li>
 * <li>NieTitle</li>
 * <li>PlainTextContent</li>
 * <li>RelatedTo</li>
 * <li>RootElementOf</li>
 * <li>Subject</li>
 * <li>Version</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 29/04/10 2:21 PM
 */
public class InformationElement extends Thing {

    /**
     * http://www.semanticdesktop.org/ontologies/2007/01/19/nie#
     * InformationElement
     */
    @SuppressWarnings("hiding")
    public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet */
    @SuppressWarnings("hiding")
    public static final URI CHARACTERSET = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment */
    @SuppressWarnings("hiding")
    public static final URI COMMENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated */
    @SuppressWarnings("hiding")
    public static final URI CONTENTCREATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated",
            false);

    /**
     * http://www.semanticdesktop.org/ontologies/2007/01/19/nie#
     * contentLastModified
     */
    @SuppressWarnings("hiding")
    public static final URI CONTENTLASTMODIFIED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize */
    @SuppressWarnings("hiding")
    public static final URI CONTENTSIZE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description */
    @SuppressWarnings("hiding")
    public static final URI DESCRIPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator */
    @SuppressWarnings("hiding")
    public static final URI GENERATOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generatorOption */
    @SuppressWarnings("hiding")
    public static final URI GENERATOROPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generatorOption",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart */
    @SuppressWarnings("hiding")
    public static final URI HASLOGICALPART = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart */
    @SuppressWarnings("hiding")
    public static final URI HASPART = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart",
            false);

    /**
     * http://www.semanticdesktop.org/ontologies/2007/01/19/nie#
     * informationElementDate
     */
    @SuppressWarnings("hiding")
    public static final URI INFORMATIONELEMENTDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf */
    @SuppressWarnings("hiding")
    public static final URI ISLOGICALPARTOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs */
    @SuppressWarnings("hiding")
    public static final URI ISSTOREDAS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword */
    @SuppressWarnings("hiding")
    public static final URI KEYWORD = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal */
    @SuppressWarnings("hiding")
    public static final URI LEGAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links */
    @SuppressWarnings("hiding")
    public static final URI LINKS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType */
    @SuppressWarnings("hiding")
    public static final URI MIMETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier */
    @SuppressWarnings("hiding")
    public static final URI NIEIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language */
    @SuppressWarnings("hiding")
    public static final URI NIELANGUAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title */
    @SuppressWarnings("hiding")
    public static final URI NIETITLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title",
            false);

    /**
     * http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent
     */
    @SuppressWarnings("hiding")
    public static final URI PLAINTEXTCONTENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo */
    @SuppressWarnings("hiding")
    public static final URI RELATEDTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf */
    @SuppressWarnings("hiding")
    public static final URI ROOTELEMENTOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject */
    @SuppressWarnings("hiding")
    public static final URI SUBJECT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version */
    @SuppressWarnings("hiding")
    public static final URI VERSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version",
            false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generatorOption",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version",
                    false) };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected InformationElement(Model model,
            URI classURI,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write) {
        super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public InformationElement(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write) {
        super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public InformationElement(Model model, String uriString, boolean write)
            throws ModelRuntimeException {
        super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public InformationElement(Model model, BlankNode bnode, boolean write) {
        super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public InformationElement(Model model, boolean write) {
        super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of InformationElement or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static InformationElement getInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getInstance(model,
                instanceResource,
                InformationElement.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.semanticdesktop.org/ontologies
     * /2007/01/19/nie#InformationElement).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
            Model model) {
        return Base.getAllInstances(model,
                RDFS_CLASS,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     * 
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends InformationElement> getAllInstances_as(
            Model model) {
        return Base.getAllInstances_as(model,
                RDFS_CLASS,
                InformationElement.class);
    }

    /**
     * Remove rdf:type InformationElement from this instance. Other triples are
     * not affected. To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'InterpretedAs' to
     *         this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoInterpretedAs_Inverse(
            Model model, Object objectValue) {
        return Base
                .getAll_Inverse(model, DataObject.INTERPRETEDAS, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'InterpretedAs' to
     *         this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoInterpretedAs_Inverse() {
        return Base.getAll_Inverse(this.model, DataObject.INTERPRETEDAS, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'InterpretedAs'
     *         to this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoInterpretedAs_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                DataObject.INTERPRETEDAS,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         InformationElement instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoIsPartOf_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, DataObject.ISPARTOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         InformationElement instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoIsPartOf_Inverse() {
        return Base.getAll_Inverse(this.model, DataObject.ISPARTOF, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'IsPartOf' to
     *         this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoIsPartOf_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                DataObject.ISPARTOF,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'HasLogicalPart'
     *         to this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoHasLogicalPart_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model,
                InformationElement.HASLOGICALPART,
                objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'HasLogicalPart'
     *         to this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoHasLogicalPart_Inverse() {
        return Base.getAll_Inverse(this.model,
                InformationElement.HASLOGICALPART,
                this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'HasLogicalPart'
     *         to this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoHasLogicalPart_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                InformationElement.HASLOGICALPART,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'IsLogicalPartOf'
     *         to this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoIsLogicalPartOf_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model,
                InformationElement.ISLOGICALPARTOF,
                objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'IsLogicalPartOf'
     *         to this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoIsLogicalPartOf_Inverse() {
        return Base.getAll_Inverse(this.model,
                InformationElement.ISLOGICALPARTOF,
                this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation
     *         'IsLogicalPartOf' to this InformationElement instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoIsLogicalPartOf_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                InformationElement.ISLOGICALPARTOF,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7621c3b0 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, CHARACTERSET);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7621c3b0 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoCharacterSet() {
        return Base.has(this.model, this.getResource(), CHARACTERSET);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7621c3b0 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, CHARACTERSET);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7621c3b0 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoCharacterSet(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), CHARACTERSET);
    }

    /**
     * Get all values of property CharacterSet as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoCharacterSet_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, CHARACTERSET);
    }

    /**
     * Get all values of property CharacterSet as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoCharacterSet_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                CHARACTERSET,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property CharacterSet as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoCharacterSet_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), CHARACTERSET);
    }

    /**
     * Get all values of property CharacterSet as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoCharacterSet_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                CHARACTERSET,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property CharacterSet * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoCharacterSet(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                CHARACTERSET,
                java.lang.String.class);
    }

    /**
     * Get all values of property CharacterSet as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoCharacterSet_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                CHARACTERSET,
                java.lang.String.class);
    }

    /**
     * Get all values of property CharacterSet * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoCharacterSet() {
        return Base.getAll(this.model,
                this.getResource(),
                CHARACTERSET,
                java.lang.String.class);
    }

    /**
     * Get all values of property CharacterSet as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoCharacterSet_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                CHARACTERSET,
                java.lang.String.class);
    }

    /**
     * Adds a value to property CharacterSet as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, CHARACTERSET, value);
    }

    /**
     * Adds a value to property CharacterSet as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoCharacterSet(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), CHARACTERSET, value);
    }

    /**
     * Adds a value to property CharacterSet from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, CHARACTERSET, value);
    }

    /**
     * Adds a value to property CharacterSet from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoCharacterSet(java.lang.String value) {
        Base.add(this.model, this.getResource(), CHARACTERSET, value);
    }

    /**
     * Sets a value of property CharacterSet from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, CHARACTERSET, value);
    }

    /**
     * Sets a value of property CharacterSet from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoCharacterSet(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), CHARACTERSET, value);
    }

    /**
     * Sets a value of property CharacterSet from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, CHARACTERSET, value);
    }

    /**
     * Sets a value of property CharacterSet from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoCharacterSet(java.lang.String value) {
        Base.set(this.model, this.getResource(), CHARACTERSET, value);
    }

    /**
     * Removes a value of property CharacterSet as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, CHARACTERSET, value);
    }

    /**
     * Removes a value of property CharacterSet as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoCharacterSet(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), CHARACTERSET, value);
    }

    /**
     * Removes a value of property CharacterSet given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, CHARACTERSET, value);
    }

    /**
     * Removes a value of property CharacterSet given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoCharacterSet(java.lang.String value) {
        Base.remove(this.model, this.getResource(), CHARACTERSET, value);
    }

    /**
     * Removes all values of property CharacterSet * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoCharacterSet(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, CHARACTERSET);
    }

    /**
     * Removes all values of property CharacterSet * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoCharacterSet() {
        Base.removeAll(this.model, this.getResource(), CHARACTERSET);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@243e0b62 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, COMMENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@243e0b62 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoComment() {
        return Base.has(this.model, this.getResource(), COMMENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@243e0b62 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, COMMENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@243e0b62 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoComment(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), COMMENT);
    }

    /**
     * Get all values of property Comment as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoComment_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, COMMENT);
    }

    /**
     * Get all values of property Comment as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoComment_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                COMMENT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Comment as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoComment_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), COMMENT);
    }

    /**
     * Get all values of property Comment as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoComment_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                COMMENT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Comment * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoComment(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                COMMENT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Comment as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoComment_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                COMMENT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Comment * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoComment() {
        return Base.getAll(this.model,
                this.getResource(),
                COMMENT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Comment as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoComment_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                COMMENT,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Comment as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, COMMENT, value);
    }

    /**
     * Adds a value to property Comment as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoComment(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), COMMENT, value);
    }

    /**
     * Adds a value to property Comment from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, COMMENT, value);
    }

    /**
     * Adds a value to property Comment from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoComment(java.lang.String value) {
        Base.add(this.model, this.getResource(), COMMENT, value);
    }

    /**
     * Sets a value of property Comment from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, COMMENT, value);
    }

    /**
     * Sets a value of property Comment from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoComment(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), COMMENT, value);
    }

    /**
     * Sets a value of property Comment from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, COMMENT, value);
    }

    /**
     * Sets a value of property Comment from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoComment(java.lang.String value) {
        Base.set(this.model, this.getResource(), COMMENT, value);
    }

    /**
     * Removes a value of property Comment as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, COMMENT, value);
    }

    /**
     * Removes a value of property Comment as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoComment(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), COMMENT, value);
    }

    /**
     * Removes a value of property Comment given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, COMMENT, value);
    }

    /**
     * Removes a value of property Comment given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoComment(java.lang.String value) {
        Base.remove(this.model, this.getResource(), COMMENT, value);
    }

    /**
     * Removes all values of property Comment * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoComment(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, COMMENT);
    }

    /**
     * Removes all values of property Comment * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoComment() {
        Base.removeAll(this.model, this.getResource(), COMMENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e157985 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, CONTENTCREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e157985 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoContentCreated() {
        return Base.has(this.model, this.getResource(), CONTENTCREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e157985 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, CONTENTCREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e157985 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoContentCreated(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), CONTENTCREATED);
    }

    /**
     * Get single value of property ContentCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException
     *             at runtime, if the property has multiple values
     * 
     *             [Generated from RDFReactor template rule #get1static]
     */
    public static org.ontoware.rdf2go.model.node.Node getNepoContentCreated_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.get_asNode(model, instanceResource, CONTENTCREATED);
    }

    /**
     * Get single value of property ContentCreated as an RDF2Go node
     * 
     * @return the single value or null if no value is found
     * @throws RDFDataException
     *             , if the property has multiple values
     * 
     *             [Generated from RDFReactor template rule #get2dynamic]
     */
    public org.ontoware.rdf2go.model.node.Node getNepoContentCreated_asNode() {
        return Base.get_asNode(this.model, this.getResource(), CONTENTCREATED);
    }

    /**
     * Get single value of property ContentCreated * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException
     *             , if the property has multiple values
     * 
     *             [Generated from RDFReactor template rule #get5static]
     */
    public static java.util.Calendar getNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return (java.util.Calendar) Base.get(model,
                instanceResource,
                CONTENTCREATED,
                java.util.Calendar.class);
    }

    /**
     * Get single value of property ContentCreated . This property has
     * maxCardinality=1, that means the property takes only a single value.
     * 
     * @return the single value or null if no value is found
     * @throws RDFDataException
     *             , if the property has multiple values
     * 
     *             [Generated from RDFReactor template rule #get6dynamic]
     */
    public java.util.Calendar getNepoContentCreated() {
        return (java.util.Calendar) Base.get(this.model,
                this.getResource(),
                CONTENTCREATED,
                java.util.Calendar.class);
    }

    /**
     * Adds a value to property ContentCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * @throws CardinalityException
     *             if adding a value would bring the number of property values
     *             above the cardinality constraint.
     * 
     *             [Generated from RDFReactor template rule #add5static]
     */
    public static void addNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value)
            throws CardinalityException {
        Base.add(model, instanceResource, CONTENTCREATED, value, 1);
    }

    /**
     * Adds a value to property ContentCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * @throws CardinalityException
     *             if adding a value would bring the number of property values
     *             above the cardinality constraint.
     * 
     *             [Generated from RDFReactor template rule #add6dynamic]
     */
    public void addNepoContentCreated(org.ontoware.rdf2go.model.node.Node value)
            throws CardinalityException {
        Base.add(this.model, this.getResource(), CONTENTCREATED, value, 1);
    }

    /**
     * Adds a value to property ContentCreated from an instance of
     * java.util.Calendar
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @throws CardinalityException
     *             if adding a value would bring the number of property values
     *             above the cardinality constraint.
     * 
     *             [Generated from RDFReactor template rule #add7static]
     */
    public static void addNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) throws CardinalityException {
        Base.add(model, instanceResource, CONTENTCREATED, value, 1);
    }

    /**
     * Adds a value to property ContentCreated from an instance of
     * java.util.Calendar
     * 
     * @throws CardinalityException
     *             if adding a value would bring the number of property values
     *             above the cardinality constraint.
     * 
     *             [Generated from RDFReactor template rule #add8dynamic]
     */
    public void addNepoContentCreated(java.util.Calendar value)
            throws CardinalityException {
        Base.add(this.model, this.getResource(), CONTENTCREATED, value, 1);
    }

    /**
     * Sets a value of property ContentCreated from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, CONTENTCREATED, value);
    }

    /**
     * Sets a value of property ContentCreated from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoContentCreated(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), CONTENTCREATED, value);
    }

    /**
     * Sets a value of property ContentCreated from an instance of
     * java.util.Calendar First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) {
        Base.set(model, instanceResource, CONTENTCREATED, value);
    }

    /**
     * Sets a value of property ContentCreated from an instance of
     * java.util.Calendar First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoContentCreated(java.util.Calendar value) {
        Base.set(this.model, this.getResource(), CONTENTCREATED, value);
    }

    /**
     * Removes a value of property ContentCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, CONTENTCREATED, value);
    }

    /**
     * Removes a value of property ContentCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoContentCreated(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), CONTENTCREATED, value);
    }

    /**
     * Removes a value of property ContentCreated given as an instance of
     * java.util.Calendar
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) {
        Base.remove(model, instanceResource, CONTENTCREATED, value);
    }

    /**
     * Removes a value of property ContentCreated given as an instance of
     * java.util.Calendar
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoContentCreated(java.util.Calendar value) {
        Base.remove(this.model, this.getResource(), CONTENTCREATED, value);
    }

    /**
     * Removes all values of property ContentCreated * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoContentCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, CONTENTCREATED);
    }

    /**
     * Removes all values of property ContentCreated * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoContentCreated() {
        Base.removeAll(this.model, this.getResource(), CONTENTCREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56afd9e3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, CONTENTLASTMODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56afd9e3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoContentLastModified() {
        return Base.has(this.model, this.getResource(), CONTENTLASTMODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56afd9e3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, CONTENTLASTMODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56afd9e3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoContentLastModified(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model,
                this.getResource(),
                CONTENTLASTMODIFIED);
    }

    /**
     * Get single value of property ContentLastModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException
     *             at runtime, if the property has multiple values
     * 
     *             [Generated from RDFReactor template rule #get1static]
     */
    public static org.ontoware.rdf2go.model.node.Node getNepoContentLastModified_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.get_asNode(model, instanceResource, CONTENTLASTMODIFIED);
    }

    /**
     * Get single value of property ContentLastModified as an RDF2Go node
     * 
     * @return the single value or null if no value is found
     * @throws RDFDataException
     *             , if the property has multiple values
     * 
     *             [Generated from RDFReactor template rule #get2dynamic]
     */
    public org.ontoware.rdf2go.model.node.Node getNepoContentLastModified_asNode() {
        return Base.get_asNode(this.model,
                this.getResource(),
                CONTENTLASTMODIFIED);
    }

    /**
     * Get single value of property ContentLastModified * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException
     *             , if the property has multiple values
     * 
     *             [Generated from RDFReactor template rule #get5static]
     */
    public static java.util.Calendar getNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return (java.util.Calendar) Base.get(model,
                instanceResource,
                CONTENTLASTMODIFIED,
                java.util.Calendar.class);
    }

    /**
     * Get single value of property ContentLastModified . This property has
     * maxCardinality=1, that means the property takes only a single value.
     * 
     * @return the single value or null if no value is found
     * @throws RDFDataException
     *             , if the property has multiple values
     * 
     *             [Generated from RDFReactor template rule #get6dynamic]
     */
    public java.util.Calendar getNepoContentLastModified() {
        return (java.util.Calendar) Base.get(this.model,
                this.getResource(),
                CONTENTLASTMODIFIED,
                java.util.Calendar.class);
    }

    /**
     * Adds a value to property ContentLastModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * @throws CardinalityException
     *             if adding a value would bring the number of property values
     *             above the cardinality constraint.
     * 
     *             [Generated from RDFReactor template rule #add5static]
     */
    public static void addNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value)
            throws CardinalityException {
        Base.add(model, instanceResource, CONTENTLASTMODIFIED, value, 1);
    }

    /**
     * Adds a value to property ContentLastModified as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * @throws CardinalityException
     *             if adding a value would bring the number of property values
     *             above the cardinality constraint.
     * 
     *             [Generated from RDFReactor template rule #add6dynamic]
     */
    public void addNepoContentLastModified(
            org.ontoware.rdf2go.model.node.Node value)
            throws CardinalityException {
        Base.add(this.model, this.getResource(), CONTENTLASTMODIFIED, value, 1);
    }

    /**
     * Adds a value to property ContentLastModified from an instance of
     * java.util.Calendar
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @throws CardinalityException
     *             if adding a value would bring the number of property values
     *             above the cardinality constraint.
     * 
     *             [Generated from RDFReactor template rule #add7static]
     */
    public static void addNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) throws CardinalityException {
        Base.add(model, instanceResource, CONTENTLASTMODIFIED, value, 1);
    }

    /**
     * Adds a value to property ContentLastModified from an instance of
     * java.util.Calendar
     * 
     * @throws CardinalityException
     *             if adding a value would bring the number of property values
     *             above the cardinality constraint.
     * 
     *             [Generated from RDFReactor template rule #add8dynamic]
     */
    public void addNepoContentLastModified(java.util.Calendar value)
            throws CardinalityException {
        Base.add(this.model, this.getResource(), CONTENTLASTMODIFIED, value, 1);
    }

    /**
     * Sets a value of property ContentLastModified from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, CONTENTLASTMODIFIED, value);
    }

    /**
     * Sets a value of property ContentLastModified from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoContentLastModified(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), CONTENTLASTMODIFIED, value);
    }

    /**
     * Sets a value of property ContentLastModified from an instance of
     * java.util.Calendar First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) {
        Base.set(model, instanceResource, CONTENTLASTMODIFIED, value);
    }

    /**
     * Sets a value of property ContentLastModified from an instance of
     * java.util.Calendar First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoContentLastModified(java.util.Calendar value) {
        Base.set(this.model, this.getResource(), CONTENTLASTMODIFIED, value);
    }

    /**
     * Removes a value of property ContentLastModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, CONTENTLASTMODIFIED, value);
    }

    /**
     * Removes a value of property ContentLastModified as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoContentLastModified(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), CONTENTLASTMODIFIED, value);
    }

    /**
     * Removes a value of property ContentLastModified given as an instance of
     * java.util.Calendar
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) {
        Base.remove(model, instanceResource, CONTENTLASTMODIFIED, value);
    }

    /**
     * Removes a value of property ContentLastModified given as an instance of
     * java.util.Calendar
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoContentLastModified(java.util.Calendar value) {
        Base.remove(this.model, this.getResource(), CONTENTLASTMODIFIED, value);
    }

    /**
     * Removes all values of property ContentLastModified * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoContentLastModified(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, CONTENTLASTMODIFIED);
    }

    /**
     * Removes all values of property ContentLastModified * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoContentLastModified() {
        Base.removeAll(this.model, this.getResource(), CONTENTLASTMODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42506e6d has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, CONTENTSIZE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42506e6d has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoContentSize() {
        return Base.has(this.model, this.getResource(), CONTENTSIZE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42506e6d has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, CONTENTSIZE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42506e6d has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoContentSize(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), CONTENTSIZE);
    }

    /**
     * Get all values of property ContentSize as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoContentSize_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, CONTENTSIZE);
    }

    /**
     * Get all values of property ContentSize as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoContentSize_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                CONTENTSIZE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ContentSize as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoContentSize_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), CONTENTSIZE);
    }

    /**
     * Get all values of property ContentSize as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoContentSize_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                CONTENTSIZE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ContentSize * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllNepoContentSize(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                CONTENTSIZE,
                java.lang.Integer.class);
    }

    /**
     * Get all values of property ContentSize as a ReactorResult of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.Integer> getAllNepoContentSize_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                CONTENTSIZE,
                java.lang.Integer.class);
    }

    /**
     * Get all values of property ContentSize * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllNepoContentSize() {
        return Base.getAll(this.model,
                this.getResource(),
                CONTENTSIZE,
                java.lang.Integer.class);
    }

    /**
     * Get all values of property ContentSize as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.Integer> getAllNepoContentSize_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                CONTENTSIZE,
                java.lang.Integer.class);
    }

    /**
     * Adds a value to property ContentSize as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, CONTENTSIZE, value);
    }

    /**
     * Adds a value to property ContentSize as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoContentSize(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), CONTENTSIZE, value);
    }

    /**
     * Adds a value to property ContentSize from an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value) {
        Base.add(model, instanceResource, CONTENTSIZE, value);
    }

    /**
     * Adds a value to property ContentSize from an instance of
     * java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoContentSize(java.lang.Integer value) {
        Base.add(this.model, this.getResource(), CONTENTSIZE, value);
    }

    /**
     * Sets a value of property ContentSize from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, CONTENTSIZE, value);
    }

    /**
     * Sets a value of property ContentSize from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoContentSize(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), CONTENTSIZE, value);
    }

    /**
     * Sets a value of property ContentSize from an instance of
     * java.lang.Integer First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value) {
        Base.set(model, instanceResource, CONTENTSIZE, value);
    }

    /**
     * Sets a value of property ContentSize from an instance of
     * java.lang.Integer First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoContentSize(java.lang.Integer value) {
        Base.set(this.model, this.getResource(), CONTENTSIZE, value);
    }

    /**
     * Removes a value of property ContentSize as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, CONTENTSIZE, value);
    }

    /**
     * Removes a value of property ContentSize as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoContentSize(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), CONTENTSIZE, value);
    }

    /**
     * Removes a value of property ContentSize given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value) {
        Base.remove(model, instanceResource, CONTENTSIZE, value);
    }

    /**
     * Removes a value of property ContentSize given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoContentSize(java.lang.Integer value) {
        Base.remove(this.model, this.getResource(), CONTENTSIZE, value);
    }

    /**
     * Removes all values of property ContentSize * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoContentSize(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, CONTENTSIZE);
    }

    /**
     * Removes all values of property ContentSize * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoContentSize() {
        Base.removeAll(this.model, this.getResource(), CONTENTSIZE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fca4868 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fca4868 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoDescription() {
        return Base.has(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fca4868 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fca4868 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoDescription(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoDescription_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
    }

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoDescription_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoDescription_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoDescription_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoDescription(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                DESCRIPTION,
                java.lang.String.class);
    }

    /**
     * Get all values of property Description as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoDescription_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                DESCRIPTION,
                java.lang.String.class);
    }

    /**
     * Get all values of property Description * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoDescription() {
        return Base.getAll(this.model,
                this.getResource(),
                DESCRIPTION,
                java.lang.String.class);
    }

    /**
     * Get all values of property Description as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoDescription_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                DESCRIPTION,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoDescription(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoDescription(java.lang.String value) {
        Base.add(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoDescription(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoDescription(java.lang.String value) {
        Base.set(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoDescription(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoDescription(java.lang.String value) {
        Base.remove(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoDescription(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, DESCRIPTION);
    }

    /**
     * Removes all values of property Description * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoDescription() {
        Base.removeAll(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738e7a09 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, GENERATOR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738e7a09 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoGenerator() {
        return Base.has(this.model, this.getResource(), GENERATOR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738e7a09 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, GENERATOR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738e7a09 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoGenerator(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), GENERATOR);
    }

    /**
     * Get all values of property Generator as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoGenerator_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, GENERATOR);
    }

    /**
     * Get all values of property Generator as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoGenerator_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                GENERATOR,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Generator as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoGenerator_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), GENERATOR);
    }

    /**
     * Get all values of property Generator as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoGenerator_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                GENERATOR,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Generator * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoGenerator(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                GENERATOR,
                java.lang.String.class);
    }

    /**
     * Get all values of property Generator as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoGenerator_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                GENERATOR,
                java.lang.String.class);
    }

    /**
     * Get all values of property Generator * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoGenerator() {
        return Base.getAll(this.model,
                this.getResource(),
                GENERATOR,
                java.lang.String.class);
    }

    /**
     * Get all values of property Generator as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoGenerator_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                GENERATOR,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Generator as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, GENERATOR, value);
    }

    /**
     * Adds a value to property Generator as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoGenerator(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), GENERATOR, value);
    }

    /**
     * Adds a value to property Generator from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, GENERATOR, value);
    }

    /**
     * Adds a value to property Generator from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoGenerator(java.lang.String value) {
        Base.add(this.model, this.getResource(), GENERATOR, value);
    }

    /**
     * Sets a value of property Generator from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, GENERATOR, value);
    }

    /**
     * Sets a value of property Generator from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoGenerator(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), GENERATOR, value);
    }

    /**
     * Sets a value of property Generator from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, GENERATOR, value);
    }

    /**
     * Sets a value of property Generator from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoGenerator(java.lang.String value) {
        Base.set(this.model, this.getResource(), GENERATOR, value);
    }

    /**
     * Removes a value of property Generator as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, GENERATOR, value);
    }

    /**
     * Removes a value of property Generator as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoGenerator(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), GENERATOR, value);
    }

    /**
     * Removes a value of property Generator given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, GENERATOR, value);
    }

    /**
     * Removes a value of property Generator given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoGenerator(java.lang.String value) {
        Base.remove(this.model, this.getResource(), GENERATOR, value);
    }

    /**
     * Removes all values of property Generator * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoGenerator(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, GENERATOR);
    }

    /**
     * Removes all values of property Generator * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoGenerator() {
        Base.removeAll(this.model, this.getResource(), GENERATOR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54405a01 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, GENERATOROPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54405a01 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoGeneratorOption() {
        return Base.has(this.model, this.getResource(), GENERATOROPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54405a01 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, GENERATOROPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54405a01 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoGeneratorOption(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), GENERATOROPTION);
    }

    /**
     * Get all values of property GeneratorOption as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoGeneratorOption_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, GENERATOROPTION);
    }

    /**
     * Get all values of property GeneratorOption as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoGeneratorOption_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                GENERATOROPTION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property GeneratorOption as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoGeneratorOption_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                GENERATOROPTION);
    }

    /**
     * Get all values of property GeneratorOption as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoGeneratorOption_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                GENERATOROPTION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property GeneratorOption * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoGeneratorOption(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                GENERATOROPTION,
                Thing.class);
    }

    /**
     * Get all values of property GeneratorOption as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoGeneratorOption_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                GENERATOROPTION,
                Thing.class);
    }

    /**
     * Get all values of property GeneratorOption * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoGeneratorOption() {
        return Base.getAll(this.model,
                this.getResource(),
                GENERATOROPTION,
                Thing.class);
    }

    /**
     * Get all values of property GeneratorOption as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoGeneratorOption_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                GENERATOROPTION,
                Thing.class);
    }

    /**
     * Adds a value to property GeneratorOption as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, GENERATOROPTION, value);
    }

    /**
     * Adds a value to property GeneratorOption as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoGeneratorOption(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), GENERATOROPTION, value);
    }

    /**
     * Adds a value to property GeneratorOption from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, GENERATOROPTION, value);
    }

    /**
     * Adds a value to property GeneratorOption from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoGeneratorOption(Thing value) {
        Base.add(this.model, this.getResource(), GENERATOROPTION, value);
    }

    /**
     * Sets a value of property GeneratorOption from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, GENERATOROPTION, value);
    }

    /**
     * Sets a value of property GeneratorOption from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoGeneratorOption(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), GENERATOROPTION, value);
    }

    /**
     * Sets a value of property GeneratorOption from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, GENERATOROPTION, value);
    }

    /**
     * Sets a value of property GeneratorOption from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoGeneratorOption(Thing value) {
        Base.set(this.model, this.getResource(), GENERATOROPTION, value);
    }

    /**
     * Removes a value of property GeneratorOption as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, GENERATOROPTION, value);
    }

    /**
     * Removes a value of property GeneratorOption as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoGeneratorOption(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), GENERATOROPTION, value);
    }

    /**
     * Removes a value of property GeneratorOption given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, GENERATOROPTION, value);
    }

    /**
     * Removes a value of property GeneratorOption given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoGeneratorOption(Thing value) {
        Base.remove(this.model, this.getResource(), GENERATOROPTION, value);
    }

    /**
     * Removes all values of property GeneratorOption * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoGeneratorOption(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, GENERATOROPTION);
    }

    /**
     * Removes all values of property GeneratorOption * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoGeneratorOption() {
        Base.removeAll(this.model, this.getResource(), GENERATOROPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13a709f1 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, HASLOGICALPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13a709f1 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoHasLogicalPart() {
        return Base.has(this.model, this.getResource(), HASLOGICALPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13a709f1 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, HASLOGICALPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13a709f1 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoHasLogicalPart(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), HASLOGICALPART);
    }

    /**
     * Get all values of property HasLogicalPart as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoHasLogicalPart_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, HASLOGICALPART);
    }

    /**
     * Get all values of property HasLogicalPart as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoHasLogicalPart_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                HASLOGICALPART,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property HasLogicalPart as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoHasLogicalPart_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                HASLOGICALPART);
    }

    /**
     * Get all values of property HasLogicalPart as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoHasLogicalPart_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                HASLOGICALPART,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property HasLogicalPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<InformationElement> getAllNepoHasLogicalPart(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                HASLOGICALPART,
                InformationElement.class);
    }

    /**
     * Get all values of property HasLogicalPart as a ReactorResult of
     * InformationElement
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<InformationElement> getAllNepoHasLogicalPart_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                HASLOGICALPART,
                InformationElement.class);
    }

    /**
     * Get all values of property HasLogicalPart * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<InformationElement> getAllNepoHasLogicalPart() {
        return Base.getAll(this.model,
                this.getResource(),
                HASLOGICALPART,
                InformationElement.class);
    }

    /**
     * Get all values of property HasLogicalPart as a ReactorResult of
     * InformationElement
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<InformationElement> getAllNepoHasLogicalPart_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                HASLOGICALPART,
                InformationElement.class);
    }

    /**
     * Adds a value to property HasLogicalPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, HASLOGICALPART, value);
    }

    /**
     * Adds a value to property HasLogicalPart as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoHasLogicalPart(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), HASLOGICALPART, value);
    }

    /**
     * Adds a value to property HasLogicalPart from an instance of
     * InformationElement
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            InformationElement value) {
        Base.add(model, instanceResource, HASLOGICALPART, value);
    }

    /**
     * Adds a value to property HasLogicalPart from an instance of
     * InformationElement
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoHasLogicalPart(InformationElement value) {
        Base.add(this.model, this.getResource(), HASLOGICALPART, value);
    }

    /**
     * Sets a value of property HasLogicalPart from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, HASLOGICALPART, value);
    }

    /**
     * Sets a value of property HasLogicalPart from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoHasLogicalPart(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), HASLOGICALPART, value);
    }

    /**
     * Sets a value of property HasLogicalPart from an instance of
     * InformationElement First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            InformationElement value) {
        Base.set(model, instanceResource, HASLOGICALPART, value);
    }

    /**
     * Sets a value of property HasLogicalPart from an instance of
     * InformationElement First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoHasLogicalPart(InformationElement value) {
        Base.set(this.model, this.getResource(), HASLOGICALPART, value);
    }

    /**
     * Removes a value of property HasLogicalPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, HASLOGICALPART, value);
    }

    /**
     * Removes a value of property HasLogicalPart as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoHasLogicalPart(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), HASLOGICALPART, value);
    }

    /**
     * Removes a value of property HasLogicalPart given as an instance of
     * InformationElement
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            InformationElement value) {
        Base.remove(model, instanceResource, HASLOGICALPART, value);
    }

    /**
     * Removes a value of property HasLogicalPart given as an instance of
     * InformationElement
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoHasLogicalPart(InformationElement value) {
        Base.remove(this.model, this.getResource(), HASLOGICALPART, value);
    }

    /**
     * Removes all values of property HasLogicalPart * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoHasLogicalPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, HASLOGICALPART);
    }

    /**
     * Removes all values of property HasLogicalPart * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoHasLogicalPart() {
        Base.removeAll(this.model, this.getResource(), HASLOGICALPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c1c2956 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c1c2956 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoHasPart() {
        return Base.has(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c1c2956 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c1c2956 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoHasPart(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), HASPART);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoHasPart_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, HASPART);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoHasPart_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                HASPART,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoHasPart_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), HASPART);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoHasPart_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                HASPART,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property HasPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<DataObject> getAllNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, HASPART, DataObject.class);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<DataObject> getAllNepoHasPart_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                HASPART,
                DataObject.class);
    }

    /**
     * Get all values of property HasPart * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<DataObject> getAllNepoHasPart() {
        return Base.getAll(this.model,
                this.getResource(),
                HASPART,
                DataObject.class);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of DataObject
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<DataObject> getAllNepoHasPart_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                HASPART,
                DataObject.class);
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoHasPart(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of DataObject
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoHasPart(DataObject value) {
        Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoHasPart(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of DataObject First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of DataObject First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoHasPart(DataObject value) {
        Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoHasPart(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of DataObject
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoHasPart(DataObject value) {
        Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes all values of property HasPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoHasPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, HASPART);
    }

    /**
     * Removes all values of property HasPart * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoHasPart() {
        Base.removeAll(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e689490 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, INFORMATIONELEMENTDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e689490 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoInformationElementDate() {
        return Base.has(this.model, this.getResource(), INFORMATIONELEMENTDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e689490 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, INFORMATIONELEMENTDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e689490 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoInformationElementDate(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model,
                this.getResource(),
                INFORMATIONELEMENTDATE);
    }

    /**
     * Get all values of property InformationElementDate as an Iterator over
     * RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoInformationElementDate_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model,
                instanceResource,
                INFORMATIONELEMENTDATE);
    }

    /**
     * Get all values of property InformationElementDate as a ReactorResult of
     * RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoInformationElementDate_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                INFORMATIONELEMENTDATE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property InformationElementDate as an Iterator over
     * RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoInformationElementDate_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                INFORMATIONELEMENTDATE);
    }

    /**
     * Get all values of property InformationElementDate as a ReactorResult of
     * RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoInformationElementDate_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                INFORMATIONELEMENTDATE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property InformationElementDate * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.util.Calendar> getAllNepoInformationElementDate(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                INFORMATIONELEMENTDATE,
                java.util.Calendar.class);
    }

    /**
     * Get all values of property InformationElementDate as a ReactorResult of
     * java.util.Calendar
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.util.Calendar> getAllNepoInformationElementDate_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                INFORMATIONELEMENTDATE,
                java.util.Calendar.class);
    }

    /**
     * Get all values of property InformationElementDate * @return a
     * ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.util.Calendar> getAllNepoInformationElementDate() {
        return Base.getAll(this.model,
                this.getResource(),
                INFORMATIONELEMENTDATE,
                java.util.Calendar.class);
    }

    /**
     * Get all values of property InformationElementDate as a ReactorResult of
     * java.util.Calendar
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.util.Calendar> getAllNepoInformationElementDate_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                INFORMATIONELEMENTDATE,
                java.util.Calendar.class);
    }

    /**
     * Adds a value to property InformationElementDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, INFORMATIONELEMENTDATE, value);
    }

    /**
     * Adds a value to property InformationElementDate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoInformationElementDate(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
    }

    /**
     * Adds a value to property InformationElementDate from an instance of
     * java.util.Calendar
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) {
        Base.add(model, instanceResource, INFORMATIONELEMENTDATE, value);
    }

    /**
     * Adds a value to property InformationElementDate from an instance of
     * java.util.Calendar
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoInformationElementDate(java.util.Calendar value) {
        Base.add(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
    }

    /**
     * Sets a value of property InformationElementDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, INFORMATIONELEMENTDATE, value);
    }

    /**
     * Sets a value of property InformationElementDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoInformationElementDate(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
    }

    /**
     * Sets a value of property InformationElementDate from an instance of
     * java.util.Calendar First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) {
        Base.set(model, instanceResource, INFORMATIONELEMENTDATE, value);
    }

    /**
     * Sets a value of property InformationElementDate from an instance of
     * java.util.Calendar First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoInformationElementDate(java.util.Calendar value) {
        Base.set(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
    }

    /**
     * Removes a value of property InformationElementDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, INFORMATIONELEMENTDATE, value);
    }

    /**
     * Removes a value of property InformationElementDate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoInformationElementDate(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model,
                this.getResource(),
                INFORMATIONELEMENTDATE,
                value);
    }

    /**
     * Removes a value of property InformationElementDate given as an instance
     * of java.util.Calendar
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.util.Calendar value) {
        Base.remove(model, instanceResource, INFORMATIONELEMENTDATE, value);
    }

    /**
     * Removes a value of property InformationElementDate given as an instance
     * of java.util.Calendar
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoInformationElementDate(java.util.Calendar value) {
        Base.remove(this.model,
                this.getResource(),
                INFORMATIONELEMENTDATE,
                value);
    }

    /**
     * Removes all values of property InformationElementDate * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoInformationElementDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, INFORMATIONELEMENTDATE);
    }

    /**
     * Removes all values of property InformationElementDate * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoInformationElementDate() {
        Base.removeAll(this.model, this.getResource(), INFORMATIONELEMENTDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1720d359 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ISLOGICALPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1720d359 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoIsLogicalPartOf() {
        return Base.has(this.model, this.getResource(), ISLOGICALPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1720d359 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ISLOGICALPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1720d359 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoIsLogicalPartOf(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), ISLOGICALPARTOF);
    }

    /**
     * Get all values of property IsLogicalPartOf as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoIsLogicalPartOf_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ISLOGICALPARTOF);
    }

    /**
     * Get all values of property IsLogicalPartOf as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoIsLogicalPartOf_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ISLOGICALPARTOF,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property IsLogicalPartOf as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoIsLogicalPartOf_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                ISLOGICALPARTOF);
    }

    /**
     * Get all values of property IsLogicalPartOf as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoIsLogicalPartOf_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ISLOGICALPARTOF,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property IsLogicalPartOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<InformationElement> getAllNepoIsLogicalPartOf(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                ISLOGICALPARTOF,
                InformationElement.class);
    }

    /**
     * Get all values of property IsLogicalPartOf as a ReactorResult of
     * InformationElement
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<InformationElement> getAllNepoIsLogicalPartOf_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ISLOGICALPARTOF,
                InformationElement.class);
    }

    /**
     * Get all values of property IsLogicalPartOf * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<InformationElement> getAllNepoIsLogicalPartOf() {
        return Base.getAll(this.model,
                this.getResource(),
                ISLOGICALPARTOF,
                InformationElement.class);
    }

    /**
     * Get all values of property IsLogicalPartOf as a ReactorResult of
     * InformationElement
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<InformationElement> getAllNepoIsLogicalPartOf_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ISLOGICALPARTOF,
                InformationElement.class);
    }

    /**
     * Adds a value to property IsLogicalPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ISLOGICALPARTOF, value);
    }

    /**
     * Adds a value to property IsLogicalPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoIsLogicalPartOf(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ISLOGICALPARTOF, value);
    }

    /**
     * Adds a value to property IsLogicalPartOf from an instance of
     * InformationElement
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            InformationElement value) {
        Base.add(model, instanceResource, ISLOGICALPARTOF, value);
    }

    /**
     * Adds a value to property IsLogicalPartOf from an instance of
     * InformationElement
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoIsLogicalPartOf(InformationElement value) {
        Base.add(this.model, this.getResource(), ISLOGICALPARTOF, value);
    }

    /**
     * Sets a value of property IsLogicalPartOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ISLOGICALPARTOF, value);
    }

    /**
     * Sets a value of property IsLogicalPartOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoIsLogicalPartOf(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ISLOGICALPARTOF, value);
    }

    /**
     * Sets a value of property IsLogicalPartOf from an instance of
     * InformationElement First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            InformationElement value) {
        Base.set(model, instanceResource, ISLOGICALPARTOF, value);
    }

    /**
     * Sets a value of property IsLogicalPartOf from an instance of
     * InformationElement First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoIsLogicalPartOf(InformationElement value) {
        Base.set(this.model, this.getResource(), ISLOGICALPARTOF, value);
    }

    /**
     * Removes a value of property IsLogicalPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ISLOGICALPARTOF, value);
    }

    /**
     * Removes a value of property IsLogicalPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoIsLogicalPartOf(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), ISLOGICALPARTOF, value);
    }

    /**
     * Removes a value of property IsLogicalPartOf given as an instance of
     * InformationElement
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            InformationElement value) {
        Base.remove(model, instanceResource, ISLOGICALPARTOF, value);
    }

    /**
     * Removes a value of property IsLogicalPartOf given as an instance of
     * InformationElement
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoIsLogicalPartOf(InformationElement value) {
        Base.remove(this.model, this.getResource(), ISLOGICALPARTOF, value);
    }

    /**
     * Removes all values of property IsLogicalPartOf * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoIsLogicalPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ISLOGICALPARTOF);
    }

    /**
     * Removes all values of property IsLogicalPartOf * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoIsLogicalPartOf() {
        Base.removeAll(this.model, this.getResource(), ISLOGICALPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@616ac126 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ISSTOREDAS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@616ac126 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoIsStoredAs() {
        return Base.has(this.model, this.getResource(), ISSTOREDAS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@616ac126 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ISSTOREDAS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@616ac126 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoIsStoredAs(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), ISSTOREDAS);
    }

    /**
     * Get all values of property IsStoredAs as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoIsStoredAs_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ISSTOREDAS);
    }

    /**
     * Get all values of property IsStoredAs as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoIsStoredAs_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ISSTOREDAS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property IsStoredAs as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoIsStoredAs_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), ISSTOREDAS);
    }

    /**
     * Get all values of property IsStoredAs as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoIsStoredAs_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ISSTOREDAS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property IsStoredAs * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<DataObject> getAllNepoIsStoredAs(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                ISSTOREDAS,
                DataObject.class);
    }

    /**
     * Get all values of property IsStoredAs as a ReactorResult of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<DataObject> getAllNepoIsStoredAs_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ISSTOREDAS,
                DataObject.class);
    }

    /**
     * Get all values of property IsStoredAs * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<DataObject> getAllNepoIsStoredAs() {
        return Base.getAll(this.model,
                this.getResource(),
                ISSTOREDAS,
                DataObject.class);
    }

    /**
     * Get all values of property IsStoredAs as a ReactorResult of DataObject
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<DataObject> getAllNepoIsStoredAs_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ISSTOREDAS,
                DataObject.class);
    }

    /**
     * Adds a value to property IsStoredAs as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ISSTOREDAS, value);
    }

    /**
     * Adds a value to property IsStoredAs as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoIsStoredAs(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ISSTOREDAS, value);
    }

    /**
     * Adds a value to property IsStoredAs from an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.add(model, instanceResource, ISSTOREDAS, value);
    }

    /**
     * Adds a value to property IsStoredAs from an instance of DataObject
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoIsStoredAs(DataObject value) {
        Base.add(this.model, this.getResource(), ISSTOREDAS, value);
    }

    /**
     * Sets a value of property IsStoredAs from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ISSTOREDAS, value);
    }

    /**
     * Sets a value of property IsStoredAs from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoIsStoredAs(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ISSTOREDAS, value);
    }

    /**
     * Sets a value of property IsStoredAs from an instance of DataObject First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.set(model, instanceResource, ISSTOREDAS, value);
    }

    /**
     * Sets a value of property IsStoredAs from an instance of DataObject First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoIsStoredAs(DataObject value) {
        Base.set(this.model, this.getResource(), ISSTOREDAS, value);
    }

    /**
     * Removes a value of property IsStoredAs as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ISSTOREDAS, value);
    }

    /**
     * Removes a value of property IsStoredAs as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoIsStoredAs(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), ISSTOREDAS, value);
    }

    /**
     * Removes a value of property IsStoredAs given as an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.remove(model, instanceResource, ISSTOREDAS, value);
    }

    /**
     * Removes a value of property IsStoredAs given as an instance of DataObject
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoIsStoredAs(DataObject value) {
        Base.remove(this.model, this.getResource(), ISSTOREDAS, value);
    }

    /**
     * Removes all values of property IsStoredAs * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoIsStoredAs(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ISSTOREDAS);
    }

    /**
     * Removes all values of property IsStoredAs * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoIsStoredAs() {
        Base.removeAll(this.model, this.getResource(), ISSTOREDAS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@387f9d70 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, KEYWORD);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@387f9d70 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoKeyword() {
        return Base.has(this.model, this.getResource(), KEYWORD);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@387f9d70 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, KEYWORD);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@387f9d70 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoKeyword(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), KEYWORD);
    }

    /**
     * Get all values of property Keyword as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoKeyword_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, KEYWORD);
    }

    /**
     * Get all values of property Keyword as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoKeyword_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                KEYWORD,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Keyword as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoKeyword_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), KEYWORD);
    }

    /**
     * Get all values of property Keyword as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoKeyword_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                KEYWORD,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Keyword * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoKeyword(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                KEYWORD,
                java.lang.String.class);
    }

    /**
     * Get all values of property Keyword as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoKeyword_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                KEYWORD,
                java.lang.String.class);
    }

    /**
     * Get all values of property Keyword * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoKeyword() {
        return Base.getAll(this.model,
                this.getResource(),
                KEYWORD,
                java.lang.String.class);
    }

    /**
     * Get all values of property Keyword as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoKeyword_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                KEYWORD,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Keyword as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, KEYWORD, value);
    }

    /**
     * Adds a value to property Keyword as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoKeyword(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), KEYWORD, value);
    }

    /**
     * Adds a value to property Keyword from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, KEYWORD, value);
    }

    /**
     * Adds a value to property Keyword from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoKeyword(java.lang.String value) {
        Base.add(this.model, this.getResource(), KEYWORD, value);
    }

    /**
     * Sets a value of property Keyword from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, KEYWORD, value);
    }

    /**
     * Sets a value of property Keyword from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoKeyword(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), KEYWORD, value);
    }

    /**
     * Sets a value of property Keyword from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, KEYWORD, value);
    }

    /**
     * Sets a value of property Keyword from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoKeyword(java.lang.String value) {
        Base.set(this.model, this.getResource(), KEYWORD, value);
    }

    /**
     * Removes a value of property Keyword as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, KEYWORD, value);
    }

    /**
     * Removes a value of property Keyword as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoKeyword(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), KEYWORD, value);
    }

    /**
     * Removes a value of property Keyword given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, KEYWORD, value);
    }

    /**
     * Removes a value of property Keyword given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoKeyword(java.lang.String value) {
        Base.remove(this.model, this.getResource(), KEYWORD, value);
    }

    /**
     * Removes all values of property Keyword * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoKeyword(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, KEYWORD);
    }

    /**
     * Removes all values of property Keyword * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoKeyword() {
        Base.removeAll(this.model, this.getResource(), KEYWORD);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f1483a0 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, LEGAL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f1483a0 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoLegal() {
        return Base.has(this.model, this.getResource(), LEGAL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f1483a0 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, LEGAL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f1483a0 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoLegal(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), LEGAL);
    }

    /**
     * Get all values of property Legal as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLegal_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, LEGAL);
    }

    /**
     * Get all values of property Legal as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLegal_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                LEGAL,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Legal as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLegal_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), LEGAL);
    }

    /**
     * Get all values of property Legal as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLegal_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LEGAL,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Legal * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoLegal(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                LEGAL,
                java.lang.String.class);
    }

    /**
     * Get all values of property Legal as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoLegal_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                LEGAL,
                java.lang.String.class);
    }

    /**
     * Get all values of property Legal * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoLegal() {
        return Base.getAll(this.model,
                this.getResource(),
                LEGAL,
                java.lang.String.class);
    }

    /**
     * Get all values of property Legal as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoLegal_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LEGAL,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Legal as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, LEGAL, value);
    }

    /**
     * Adds a value to property Legal as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoLegal(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), LEGAL, value);
    }

    /**
     * Adds a value to property Legal from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, LEGAL, value);
    }

    /**
     * Adds a value to property Legal from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoLegal(java.lang.String value) {
        Base.add(this.model, this.getResource(), LEGAL, value);
    }

    /**
     * Sets a value of property Legal from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, LEGAL, value);
    }

    /**
     * Sets a value of property Legal from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoLegal(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), LEGAL, value);
    }

    /**
     * Sets a value of property Legal from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, LEGAL, value);
    }

    /**
     * Sets a value of property Legal from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoLegal(java.lang.String value) {
        Base.set(this.model, this.getResource(), LEGAL, value);
    }

    /**
     * Removes a value of property Legal as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, LEGAL, value);
    }

    /**
     * Removes a value of property Legal as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoLegal(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), LEGAL, value);
    }

    /**
     * Removes a value of property Legal given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, LEGAL, value);
    }

    /**
     * Removes a value of property Legal given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoLegal(java.lang.String value) {
        Base.remove(this.model, this.getResource(), LEGAL, value);
    }

    /**
     * Removes all values of property Legal * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoLegal(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, LEGAL);
    }

    /**
     * Removes all values of property Legal * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoLegal() {
        Base.removeAll(this.model, this.getResource(), LEGAL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@307661f4 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, LINKS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@307661f4 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoLinks() {
        return Base.has(this.model, this.getResource(), LINKS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@307661f4 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, LINKS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@307661f4 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoLinks(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), LINKS);
    }

    /**
     * Get all values of property Links as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLinks_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, LINKS);
    }

    /**
     * Get all values of property Links as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLinks_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                LINKS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Links as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLinks_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), LINKS);
    }

    /**
     * Get all values of property Links as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLinks_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LINKS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Links * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<DataObject> getAllNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, LINKS, DataObject.class);
    }

    /**
     * Get all values of property Links as a ReactorResult of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<DataObject> getAllNepoLinks_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, LINKS, DataObject.class);
    }

    /**
     * Get all values of property Links * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<DataObject> getAllNepoLinks() {
        return Base.getAll(this.model,
                this.getResource(),
                LINKS,
                DataObject.class);
    }

    /**
     * Get all values of property Links as a ReactorResult of DataObject
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<DataObject> getAllNepoLinks_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LINKS,
                DataObject.class);
    }

    /**
     * Adds a value to property Links as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, LINKS, value);
    }

    /**
     * Adds a value to property Links as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoLinks(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), LINKS, value);
    }

    /**
     * Adds a value to property Links from an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.add(model, instanceResource, LINKS, value);
    }

    /**
     * Adds a value to property Links from an instance of DataObject
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoLinks(DataObject value) {
        Base.add(this.model, this.getResource(), LINKS, value);
    }

    /**
     * Sets a value of property Links from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, LINKS, value);
    }

    /**
     * Sets a value of property Links from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoLinks(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), LINKS, value);
    }

    /**
     * Sets a value of property Links from an instance of DataObject First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.set(model, instanceResource, LINKS, value);
    }

    /**
     * Sets a value of property Links from an instance of DataObject First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoLinks(DataObject value) {
        Base.set(this.model, this.getResource(), LINKS, value);
    }

    /**
     * Removes a value of property Links as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, LINKS, value);
    }

    /**
     * Removes a value of property Links as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoLinks(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), LINKS, value);
    }

    /**
     * Removes a value of property Links given as an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.remove(model, instanceResource, LINKS, value);
    }

    /**
     * Removes a value of property Links given as an instance of DataObject
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoLinks(DataObject value) {
        Base.remove(this.model, this.getResource(), LINKS, value);
    }

    /**
     * Removes all values of property Links * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoLinks(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, LINKS);
    }

    /**
     * Removes all values of property Links * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoLinks() {
        Base.removeAll(this.model, this.getResource(), LINKS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d69084f has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, MIMETYPE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d69084f has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoMimeType() {
        return Base.has(this.model, this.getResource(), MIMETYPE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d69084f has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, MIMETYPE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d69084f has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoMimeType(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), MIMETYPE);
    }

    /**
     * Get all values of property MimeType as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoMimeType_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, MIMETYPE);
    }

    /**
     * Get all values of property MimeType as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoMimeType_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                MIMETYPE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property MimeType as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoMimeType_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), MIMETYPE);
    }

    /**
     * Get all values of property MimeType as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoMimeType_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                MIMETYPE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property MimeType * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoMimeType(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                MIMETYPE,
                java.lang.String.class);
    }

    /**
     * Get all values of property MimeType as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoMimeType_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                MIMETYPE,
                java.lang.String.class);
    }

    /**
     * Get all values of property MimeType * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoMimeType() {
        return Base.getAll(this.model,
                this.getResource(),
                MIMETYPE,
                java.lang.String.class);
    }

    /**
     * Get all values of property MimeType as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoMimeType_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                MIMETYPE,
                java.lang.String.class);
    }

    /**
     * Adds a value to property MimeType as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, MIMETYPE, value);
    }

    /**
     * Adds a value to property MimeType as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoMimeType(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), MIMETYPE, value);
    }

    /**
     * Adds a value to property MimeType from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, MIMETYPE, value);
    }

    /**
     * Adds a value to property MimeType from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoMimeType(java.lang.String value) {
        Base.add(this.model, this.getResource(), MIMETYPE, value);
    }

    /**
     * Sets a value of property MimeType from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, MIMETYPE, value);
    }

    /**
     * Sets a value of property MimeType from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoMimeType(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), MIMETYPE, value);
    }

    /**
     * Sets a value of property MimeType from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, MIMETYPE, value);
    }

    /**
     * Sets a value of property MimeType from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoMimeType(java.lang.String value) {
        Base.set(this.model, this.getResource(), MIMETYPE, value);
    }

    /**
     * Removes a value of property MimeType as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, MIMETYPE, value);
    }

    /**
     * Removes a value of property MimeType as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoMimeType(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), MIMETYPE, value);
    }

    /**
     * Removes a value of property MimeType given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, MIMETYPE, value);
    }

    /**
     * Removes a value of property MimeType given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoMimeType(java.lang.String value) {
        Base.remove(this.model, this.getResource(), MIMETYPE, value);
    }

    /**
     * Removes all values of property MimeType * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoMimeType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, MIMETYPE);
    }

    /**
     * Removes all values of property MimeType * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoMimeType() {
        Base.removeAll(this.model, this.getResource(), MIMETYPE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2784de18 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, NIEIDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2784de18 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoNieIdentifier() {
        return Base.has(this.model, this.getResource(), NIEIDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2784de18 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, NIEIDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2784de18 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoNieIdentifier(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), NIEIDENTIFIER);
    }

    /**
     * Get all values of property NieIdentifier as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNieIdentifier_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, NIEIDENTIFIER);
    }

    /**
     * Get all values of property NieIdentifier as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNieIdentifier_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NIEIDENTIFIER,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NieIdentifier as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNieIdentifier_asNode() {
        return Base
                .getAll_asNode(this.model, this.getResource(), NIEIDENTIFIER);
    }

    /**
     * Get all values of property NieIdentifier as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNieIdentifier_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NIEIDENTIFIER,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NieIdentifier * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoNieIdentifier(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                NIEIDENTIFIER,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieIdentifier as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoNieIdentifier_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NIEIDENTIFIER,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieIdentifier * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoNieIdentifier() {
        return Base.getAll(this.model,
                this.getResource(),
                NIEIDENTIFIER,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieIdentifier as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoNieIdentifier_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NIEIDENTIFIER,
                java.lang.String.class);
    }

    /**
     * Adds a value to property NieIdentifier as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, NIEIDENTIFIER, value);
    }

    /**
     * Adds a value to property NieIdentifier as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoNieIdentifier(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), NIEIDENTIFIER, value);
    }

    /**
     * Adds a value to property NieIdentifier from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, NIEIDENTIFIER, value);
    }

    /**
     * Adds a value to property NieIdentifier from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoNieIdentifier(java.lang.String value) {
        Base.add(this.model, this.getResource(), NIEIDENTIFIER, value);
    }

    /**
     * Sets a value of property NieIdentifier from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, NIEIDENTIFIER, value);
    }

    /**
     * Sets a value of property NieIdentifier from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoNieIdentifier(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), NIEIDENTIFIER, value);
    }

    /**
     * Sets a value of property NieIdentifier from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, NIEIDENTIFIER, value);
    }

    /**
     * Sets a value of property NieIdentifier from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoNieIdentifier(java.lang.String value) {
        Base.set(this.model, this.getResource(), NIEIDENTIFIER, value);
    }

    /**
     * Removes a value of property NieIdentifier as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, NIEIDENTIFIER, value);
    }

    /**
     * Removes a value of property NieIdentifier as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoNieIdentifier(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), NIEIDENTIFIER, value);
    }

    /**
     * Removes a value of property NieIdentifier given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, NIEIDENTIFIER, value);
    }

    /**
     * Removes a value of property NieIdentifier given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoNieIdentifier(java.lang.String value) {
        Base.remove(this.model, this.getResource(), NIEIDENTIFIER, value);
    }

    /**
     * Removes all values of property NieIdentifier * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoNieIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, NIEIDENTIFIER);
    }

    /**
     * Removes all values of property NieIdentifier * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoNieIdentifier() {
        Base.removeAll(this.model, this.getResource(), NIEIDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d70d74 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, NIELANGUAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d70d74 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoNieLanguage() {
        return Base.has(this.model, this.getResource(), NIELANGUAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d70d74 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, NIELANGUAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d70d74 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoNieLanguage(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), NIELANGUAGE);
    }

    /**
     * Get all values of property NieLanguage as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNieLanguage_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, NIELANGUAGE);
    }

    /**
     * Get all values of property NieLanguage as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNieLanguage_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NIELANGUAGE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NieLanguage as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNieLanguage_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), NIELANGUAGE);
    }

    /**
     * Get all values of property NieLanguage as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNieLanguage_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NIELANGUAGE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NieLanguage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoNieLanguage(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                NIELANGUAGE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieLanguage as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoNieLanguage_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NIELANGUAGE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieLanguage * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoNieLanguage() {
        return Base.getAll(this.model,
                this.getResource(),
                NIELANGUAGE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieLanguage as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoNieLanguage_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NIELANGUAGE,
                java.lang.String.class);
    }

    /**
     * Adds a value to property NieLanguage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, NIELANGUAGE, value);
    }

    /**
     * Adds a value to property NieLanguage as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoNieLanguage(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), NIELANGUAGE, value);
    }

    /**
     * Adds a value to property NieLanguage from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, NIELANGUAGE, value);
    }

    /**
     * Adds a value to property NieLanguage from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoNieLanguage(java.lang.String value) {
        Base.add(this.model, this.getResource(), NIELANGUAGE, value);
    }

    /**
     * Sets a value of property NieLanguage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, NIELANGUAGE, value);
    }

    /**
     * Sets a value of property NieLanguage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoNieLanguage(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), NIELANGUAGE, value);
    }

    /**
     * Sets a value of property NieLanguage from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, NIELANGUAGE, value);
    }

    /**
     * Sets a value of property NieLanguage from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoNieLanguage(java.lang.String value) {
        Base.set(this.model, this.getResource(), NIELANGUAGE, value);
    }

    /**
     * Removes a value of property NieLanguage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, NIELANGUAGE, value);
    }

    /**
     * Removes a value of property NieLanguage as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoNieLanguage(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), NIELANGUAGE, value);
    }

    /**
     * Removes a value of property NieLanguage given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, NIELANGUAGE, value);
    }

    /**
     * Removes a value of property NieLanguage given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoNieLanguage(java.lang.String value) {
        Base.remove(this.model, this.getResource(), NIELANGUAGE, value);
    }

    /**
     * Removes all values of property NieLanguage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoNieLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, NIELANGUAGE);
    }

    /**
     * Removes all values of property NieLanguage * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoNieLanguage() {
        Base.removeAll(this.model, this.getResource(), NIELANGUAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10e10154 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, NIETITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10e10154 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoNieTitle() {
        return Base.has(this.model, this.getResource(), NIETITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10e10154 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, NIETITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10e10154 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoNieTitle(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), NIETITLE);
    }

    /**
     * Get all values of property NieTitle as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNieTitle_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, NIETITLE);
    }

    /**
     * Get all values of property NieTitle as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNieTitle_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NIETITLE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NieTitle as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNieTitle_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), NIETITLE);
    }

    /**
     * Get all values of property NieTitle as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNieTitle_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NIETITLE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NieTitle * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoNieTitle(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                NIETITLE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieTitle as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoNieTitle_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NIETITLE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieTitle * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoNieTitle() {
        return Base.getAll(this.model,
                this.getResource(),
                NIETITLE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieTitle as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoNieTitle_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NIETITLE,
                java.lang.String.class);
    }

    /**
     * Adds a value to property NieTitle as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, NIETITLE, value);
    }

    /**
     * Adds a value to property NieTitle as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoNieTitle(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), NIETITLE, value);
    }

    /**
     * Adds a value to property NieTitle from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, NIETITLE, value);
    }

    /**
     * Adds a value to property NieTitle from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoNieTitle(java.lang.String value) {
        Base.add(this.model, this.getResource(), NIETITLE, value);
    }

    /**
     * Sets a value of property NieTitle from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, NIETITLE, value);
    }

    /**
     * Sets a value of property NieTitle from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoNieTitle(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), NIETITLE, value);
    }

    /**
     * Sets a value of property NieTitle from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, NIETITLE, value);
    }

    /**
     * Sets a value of property NieTitle from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoNieTitle(java.lang.String value) {
        Base.set(this.model, this.getResource(), NIETITLE, value);
    }

    /**
     * Removes a value of property NieTitle as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, NIETITLE, value);
    }

    /**
     * Removes a value of property NieTitle as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoNieTitle(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), NIETITLE, value);
    }

    /**
     * Removes a value of property NieTitle given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, NIETITLE, value);
    }

    /**
     * Removes a value of property NieTitle given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoNieTitle(java.lang.String value) {
        Base.remove(this.model, this.getResource(), NIETITLE, value);
    }

    /**
     * Removes all values of property NieTitle * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoNieTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, NIETITLE);
    }

    /**
     * Removes all values of property NieTitle * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoNieTitle() {
        Base.removeAll(this.model, this.getResource(), NIETITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27738a7c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, PLAINTEXTCONTENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27738a7c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoPlainTextContent() {
        return Base.has(this.model, this.getResource(), PLAINTEXTCONTENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27738a7c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, PLAINTEXTCONTENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27738a7c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoPlainTextContent(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), PLAINTEXTCONTENT);
    }

    /**
     * Get all values of property PlainTextContent as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoPlainTextContent_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, PLAINTEXTCONTENT);
    }

    /**
     * Get all values of property PlainTextContent as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoPlainTextContent_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                PLAINTEXTCONTENT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property PlainTextContent as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoPlainTextContent_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                PLAINTEXTCONTENT);
    }

    /**
     * Get all values of property PlainTextContent as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoPlainTextContent_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                PLAINTEXTCONTENT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property PlainTextContent * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoPlainTextContent(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                PLAINTEXTCONTENT,
                java.lang.String.class);
    }

    /**
     * Get all values of property PlainTextContent as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoPlainTextContent_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                PLAINTEXTCONTENT,
                java.lang.String.class);
    }

    /**
     * Get all values of property PlainTextContent * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoPlainTextContent() {
        return Base.getAll(this.model,
                this.getResource(),
                PLAINTEXTCONTENT,
                java.lang.String.class);
    }

    /**
     * Get all values of property PlainTextContent as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoPlainTextContent_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                PLAINTEXTCONTENT,
                java.lang.String.class);
    }

    /**
     * Adds a value to property PlainTextContent as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, PLAINTEXTCONTENT, value);
    }

    /**
     * Adds a value to property PlainTextContent as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoPlainTextContent(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), PLAINTEXTCONTENT, value);
    }

    /**
     * Adds a value to property PlainTextContent from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, PLAINTEXTCONTENT, value);
    }

    /**
     * Adds a value to property PlainTextContent from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoPlainTextContent(java.lang.String value) {
        Base.add(this.model, this.getResource(), PLAINTEXTCONTENT, value);
    }

    /**
     * Sets a value of property PlainTextContent from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, PLAINTEXTCONTENT, value);
    }

    /**
     * Sets a value of property PlainTextContent from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoPlainTextContent(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), PLAINTEXTCONTENT, value);
    }

    /**
     * Sets a value of property PlainTextContent from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, PLAINTEXTCONTENT, value);
    }

    /**
     * Sets a value of property PlainTextContent from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoPlainTextContent(java.lang.String value) {
        Base.set(this.model, this.getResource(), PLAINTEXTCONTENT, value);
    }

    /**
     * Removes a value of property PlainTextContent as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, PLAINTEXTCONTENT, value);
    }

    /**
     * Removes a value of property PlainTextContent as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoPlainTextContent(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), PLAINTEXTCONTENT, value);
    }

    /**
     * Removes a value of property PlainTextContent given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, PLAINTEXTCONTENT, value);
    }

    /**
     * Removes a value of property PlainTextContent given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoPlainTextContent(java.lang.String value) {
        Base.remove(this.model, this.getResource(), PLAINTEXTCONTENT, value);
    }

    /**
     * Removes all values of property PlainTextContent * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoPlainTextContent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, PLAINTEXTCONTENT);
    }

    /**
     * Removes all values of property PlainTextContent * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoPlainTextContent() {
        Base.removeAll(this.model, this.getResource(), PLAINTEXTCONTENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2443ac12 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, RELATEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2443ac12 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoRelatedTo() {
        return Base.has(this.model, this.getResource(), RELATEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2443ac12 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, RELATEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2443ac12 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoRelatedTo(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), RELATEDTO);
    }

    /**
     * Get all values of property RelatedTo as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoRelatedTo_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, RELATEDTO);
    }

    /**
     * Get all values of property RelatedTo as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoRelatedTo_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                RELATEDTO,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property RelatedTo as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoRelatedTo_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), RELATEDTO);
    }

    /**
     * Get all values of property RelatedTo as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoRelatedTo_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                RELATEDTO,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property RelatedTo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<DataObject> getAllNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base
                .getAll(model, instanceResource, RELATEDTO, DataObject.class);
    }

    /**
     * Get all values of property RelatedTo as a ReactorResult of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<DataObject> getAllNepoRelatedTo_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                RELATEDTO,
                DataObject.class);
    }

    /**
     * Get all values of property RelatedTo * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<DataObject> getAllNepoRelatedTo() {
        return Base.getAll(this.model,
                this.getResource(),
                RELATEDTO,
                DataObject.class);
    }

    /**
     * Get all values of property RelatedTo as a ReactorResult of DataObject
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<DataObject> getAllNepoRelatedTo_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                RELATEDTO,
                DataObject.class);
    }

    /**
     * Adds a value to property RelatedTo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Adds a value to property RelatedTo as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoRelatedTo(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Adds a value to property RelatedTo from an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.add(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Adds a value to property RelatedTo from an instance of DataObject
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoRelatedTo(DataObject value) {
        Base.add(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Sets a value of property RelatedTo from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Sets a value of property RelatedTo from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoRelatedTo(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Sets a value of property RelatedTo from an instance of DataObject First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.set(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Sets a value of property RelatedTo from an instance of DataObject First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoRelatedTo(DataObject value) {
        Base.set(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Removes a value of property RelatedTo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Removes a value of property RelatedTo as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoRelatedTo(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Removes a value of property RelatedTo given as an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.remove(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Removes a value of property RelatedTo given as an instance of DataObject
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoRelatedTo(DataObject value) {
        Base.remove(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Removes all values of property RelatedTo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoRelatedTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, RELATEDTO);
    }

    /**
     * Removes all values of property RelatedTo * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoRelatedTo() {
        Base.removeAll(this.model, this.getResource(), RELATEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bbb81f0 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ROOTELEMENTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bbb81f0 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoRootElementOf() {
        return Base.has(this.model, this.getResource(), ROOTELEMENTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bbb81f0 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ROOTELEMENTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bbb81f0 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoRootElementOf(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), ROOTELEMENTOF);
    }

    /**
     * Get all values of property RootElementOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoRootElementOf_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ROOTELEMENTOF);
    }

    /**
     * Get all values of property RootElementOf as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoRootElementOf_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ROOTELEMENTOF,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property RootElementOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoRootElementOf_asNode() {
        return Base
                .getAll_asNode(this.model, this.getResource(), ROOTELEMENTOF);
    }

    /**
     * Get all values of property RootElementOf as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoRootElementOf_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ROOTELEMENTOF,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property RootElementOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<DataSource> getAllNepoRootElementOf(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                ROOTELEMENTOF,
                DataSource.class);
    }

    /**
     * Get all values of property RootElementOf as a ReactorResult of DataSource
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<DataSource> getAllNepoRootElementOf_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ROOTELEMENTOF,
                DataSource.class);
    }

    /**
     * Get all values of property RootElementOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<DataSource> getAllNepoRootElementOf() {
        return Base.getAll(this.model,
                this.getResource(),
                ROOTELEMENTOF,
                DataSource.class);
    }

    /**
     * Get all values of property RootElementOf as a ReactorResult of DataSource
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<DataSource> getAllNepoRootElementOf_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ROOTELEMENTOF,
                DataSource.class);
    }

    /**
     * Adds a value to property RootElementOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ROOTELEMENTOF, value);
    }

    /**
     * Adds a value to property RootElementOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoRootElementOf(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ROOTELEMENTOF, value);
    }

    /**
     * Adds a value to property RootElementOf from an instance of DataSource
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataSource value) {
        Base.add(model, instanceResource, ROOTELEMENTOF, value);
    }

    /**
     * Adds a value to property RootElementOf from an instance of DataSource
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoRootElementOf(DataSource value) {
        Base.add(this.model, this.getResource(), ROOTELEMENTOF, value);
    }

    /**
     * Sets a value of property RootElementOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ROOTELEMENTOF, value);
    }

    /**
     * Sets a value of property RootElementOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoRootElementOf(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ROOTELEMENTOF, value);
    }

    /**
     * Sets a value of property RootElementOf from an instance of DataSource
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataSource value) {
        Base.set(model, instanceResource, ROOTELEMENTOF, value);
    }

    /**
     * Sets a value of property RootElementOf from an instance of DataSource
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoRootElementOf(DataSource value) {
        Base.set(this.model, this.getResource(), ROOTELEMENTOF, value);
    }

    /**
     * Removes a value of property RootElementOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ROOTELEMENTOF, value);
    }

    /**
     * Removes a value of property RootElementOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoRootElementOf(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), ROOTELEMENTOF, value);
    }

    /**
     * Removes a value of property RootElementOf given as an instance of
     * DataSource
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataSource value) {
        Base.remove(model, instanceResource, ROOTELEMENTOF, value);
    }

    /**
     * Removes a value of property RootElementOf given as an instance of
     * DataSource
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoRootElementOf(DataSource value) {
        Base.remove(this.model, this.getResource(), ROOTELEMENTOF, value);
    }

    /**
     * Removes all values of property RootElementOf * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoRootElementOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ROOTELEMENTOF);
    }

    /**
     * Removes all values of property RootElementOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoRootElementOf() {
        Base.removeAll(this.model, this.getResource(), ROOTELEMENTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1813ed0e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1813ed0e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoSubject() {
        return Base.has(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1813ed0e has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1813ed0e has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoSubject(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoSubject_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, SUBJECT);
    }

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoSubject_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoSubject_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoSubject_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoSubject(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                SUBJECT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Subject as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoSubject_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                SUBJECT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Subject * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoSubject() {
        return Base.getAll(this.model,
                this.getResource(),
                SUBJECT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Subject as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoSubject_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                SUBJECT,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, SUBJECT, value);
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoSubject(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Adds a value to property Subject from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, SUBJECT, value);
    }

    /**
     * Adds a value to property Subject from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoSubject(java.lang.String value) {
        Base.add(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoSubject(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoSubject(java.lang.String value) {
        Base.set(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, SUBJECT, value);
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoSubject(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes a value of property Subject given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, SUBJECT, value);
    }

    /**
     * Removes a value of property Subject given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoSubject(java.lang.String value) {
        Base.remove(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoSubject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, SUBJECT);
    }

    /**
     * Removes all values of property Subject * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoSubject() {
        Base.removeAll(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7165ae07 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, VERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7165ae07 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoVersion() {
        return Base.has(this.model, this.getResource(), VERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7165ae07 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, VERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7165ae07 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoVersion(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), VERSION);
    }

    /**
     * Get all values of property Version as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoVersion_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, VERSION);
    }

    /**
     * Get all values of property Version as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoVersion_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                VERSION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Version as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoVersion_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), VERSION);
    }

    /**
     * Get all values of property Version as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoVersion_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                VERSION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Version * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoVersion(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                VERSION,
                java.lang.String.class);
    }

    /**
     * Get all values of property Version as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoVersion_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                VERSION,
                java.lang.String.class);
    }

    /**
     * Get all values of property Version * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoVersion() {
        return Base.getAll(this.model,
                this.getResource(),
                VERSION,
                java.lang.String.class);
    }

    /**
     * Get all values of property Version as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoVersion_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                VERSION,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Version as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, VERSION, value);
    }

    /**
     * Adds a value to property Version as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoVersion(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), VERSION, value);
    }

    /**
     * Adds a value to property Version from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, VERSION, value);
    }

    /**
     * Adds a value to property Version from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoVersion(java.lang.String value) {
        Base.add(this.model, this.getResource(), VERSION, value);
    }

    /**
     * Sets a value of property Version from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, VERSION, value);
    }

    /**
     * Sets a value of property Version from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoVersion(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), VERSION, value);
    }

    /**
     * Sets a value of property Version from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, VERSION, value);
    }

    /**
     * Sets a value of property Version from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoVersion(java.lang.String value) {
        Base.set(this.model, this.getResource(), VERSION, value);
    }

    /**
     * Removes a value of property Version as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, VERSION, value);
    }

    /**
     * Removes a value of property Version as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoVersion(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), VERSION, value);
    }

    /**
     * Removes a value of property Version given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, VERSION, value);
    }

    /**
     * Removes a value of property Version given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoVersion(java.lang.String value) {
        Base.remove(this.model, this.getResource(), VERSION, value);
    }

    /**
     * Removes all values of property Version * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, VERSION);
    }

    /**
     * Removes all values of property Version * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoVersion() {
        Base.removeAll(this.model, this.getResource(), VERSION);
    }
}