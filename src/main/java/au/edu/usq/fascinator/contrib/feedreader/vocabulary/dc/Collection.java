/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 28/04/10 10:43 AM
 */
package au.edu.usq.fascinator.contrib.feedreader.vocabulary.dc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AccrualMethod </li>
 *   <li> AccrualPeriodicity </li>
 *   <li> AccrualPolicy </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 28/04/10 10:43 AM
 */
public class Collection extends Thing {

    /** http://purl.org/dc/terms/Collection */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/dc/terms/Collection", false);

    /** http://purl.org/dc/terms/accrualMethod */
    @SuppressWarnings("hiding")
	public static final URI ACCRUALMETHOD = new URIImpl("http://purl.org/dc/terms/accrualMethod",false);

    /** http://purl.org/dc/terms/accrualPeriodicity */
    @SuppressWarnings("hiding")
	public static final URI ACCRUALPERIODICITY = new URIImpl("http://purl.org/dc/terms/accrualPeriodicity",false);

    /** http://purl.org/dc/terms/accrualPolicy */
    @SuppressWarnings("hiding")
	public static final URI ACCRUALPOLICY = new URIImpl("http://purl.org/dc/terms/accrualPolicy",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/dc/terms/accrualMethod",false),
      new URIImpl("http://purl.org/dc/terms/accrualPeriodicity",false),
      new URIImpl("http://purl.org/dc/terms/accrualPolicy",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Collection ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Collection ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Collection ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Collection ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Collection ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Collection  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Collection  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Collection.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/dc/terms/Collection).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Collection> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Collection.class );
	}

    /**
	 * Remove rdf:type Collection from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c127627 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDcAccrualMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACCRUALMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c127627 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDcAccrualMethod() {
		return Base.has(this.model, this.getResource(), ACCRUALMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c127627 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDcAccrualMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCRUALMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c127627 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDcAccrualMethod( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCRUALMETHOD);
	}

     /**
     * Get all values of property AccrualMethod as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualMethod_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACCRUALMETHOD);
	}
	
    /**
     * Get all values of property AccrualMethod as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualMethod_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCRUALMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AccrualMethod as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualMethod_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCRUALMETHOD);
	}

    /**
     * Get all values of property AccrualMethod as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualMethod_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCRUALMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AccrualMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<MethodofAccrual> getAllDcAccrualMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACCRUALMETHOD, MethodofAccrual.class);
	}
	
    /**
     * Get all values of property AccrualMethod as a ReactorResult of MethodofAccrual 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<MethodofAccrual> getAllDcAccrualMethod_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCRUALMETHOD, MethodofAccrual.class);
	}

    /**
     * Get all values of property AccrualMethod     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<MethodofAccrual> getAllDcAccrualMethod() {
		return Base.getAll(this.model, this.getResource(), ACCRUALMETHOD, MethodofAccrual.class);
	}

    /**
     * Get all values of property AccrualMethod as a ReactorResult of MethodofAccrual 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<MethodofAccrual> getAllDcAccrualMethod_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCRUALMETHOD, MethodofAccrual.class);
	}
 
    /**
     * Adds a value to property AccrualMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDcAccrualMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACCRUALMETHOD, value);
	}
	
    /**
     * Adds a value to property AccrualMethod as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDcAccrualMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACCRUALMETHOD, value);
	}
    /**
     * Adds a value to property AccrualMethod from an instance of MethodofAccrual 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDcAccrualMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, MethodofAccrual value) {
		Base.add(model, instanceResource, ACCRUALMETHOD, value);
	}
	
    /**
     * Adds a value to property AccrualMethod from an instance of MethodofAccrual 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDcAccrualMethod(MethodofAccrual value) {
		Base.add(this.model, this.getResource(), ACCRUALMETHOD, value);
	}
  

    /**
     * Sets a value of property AccrualMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDcAccrualMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACCRUALMETHOD, value);
	}
	
    /**
     * Sets a value of property AccrualMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDcAccrualMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACCRUALMETHOD, value);
	}
    /**
     * Sets a value of property AccrualMethod from an instance of MethodofAccrual 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDcAccrualMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, MethodofAccrual value) {
		Base.set(model, instanceResource, ACCRUALMETHOD, value);
	}
	
    /**
     * Sets a value of property AccrualMethod from an instance of MethodofAccrual 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDcAccrualMethod(MethodofAccrual value) {
		Base.set(this.model, this.getResource(), ACCRUALMETHOD, value);
	}
  


    /**
     * Removes a value of property AccrualMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDcAccrualMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACCRUALMETHOD, value);
	}
	
    /**
     * Removes a value of property AccrualMethod as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDcAccrualMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACCRUALMETHOD, value);
	}
    /**
     * Removes a value of property AccrualMethod given as an instance of MethodofAccrual 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDcAccrualMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, MethodofAccrual value) {
		Base.remove(model, instanceResource, ACCRUALMETHOD, value);
	}
	
    /**
     * Removes a value of property AccrualMethod given as an instance of MethodofAccrual 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDcAccrualMethod(MethodofAccrual value) {
		Base.remove(this.model, this.getResource(), ACCRUALMETHOD, value);
	}
  
    /**
     * Removes all values of property AccrualMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDcAccrualMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACCRUALMETHOD);
	}
	
    /**
     * Removes all values of property AccrualMethod	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDcAccrualMethod() {
		Base.removeAll(this.model, this.getResource(), ACCRUALMETHOD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c1e333 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDcAccrualPeriodicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACCRUALPERIODICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c1e333 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDcAccrualPeriodicity() {
		return Base.has(this.model, this.getResource(), ACCRUALPERIODICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c1e333 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDcAccrualPeriodicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCRUALPERIODICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c1e333 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDcAccrualPeriodicity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCRUALPERIODICITY);
	}

     /**
     * Get all values of property AccrualPeriodicity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualPeriodicity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACCRUALPERIODICITY);
	}
	
    /**
     * Get all values of property AccrualPeriodicity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualPeriodicity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCRUALPERIODICITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AccrualPeriodicity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualPeriodicity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCRUALPERIODICITY);
	}

    /**
     * Get all values of property AccrualPeriodicity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualPeriodicity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCRUALPERIODICITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AccrualPeriodicity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Frequency> getAllDcAccrualPeriodicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACCRUALPERIODICITY, Frequency.class);
	}
	
    /**
     * Get all values of property AccrualPeriodicity as a ReactorResult of Frequency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Frequency> getAllDcAccrualPeriodicity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCRUALPERIODICITY, Frequency.class);
	}

    /**
     * Get all values of property AccrualPeriodicity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Frequency> getAllDcAccrualPeriodicity() {
		return Base.getAll(this.model, this.getResource(), ACCRUALPERIODICITY, Frequency.class);
	}

    /**
     * Get all values of property AccrualPeriodicity as a ReactorResult of Frequency 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Frequency> getAllDcAccrualPeriodicity_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCRUALPERIODICITY, Frequency.class);
	}
 
    /**
     * Adds a value to property AccrualPeriodicity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDcAccrualPeriodicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACCRUALPERIODICITY, value);
	}
	
    /**
     * Adds a value to property AccrualPeriodicity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDcAccrualPeriodicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACCRUALPERIODICITY, value);
	}
    /**
     * Adds a value to property AccrualPeriodicity from an instance of Frequency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDcAccrualPeriodicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Frequency value) {
		Base.add(model, instanceResource, ACCRUALPERIODICITY, value);
	}
	
    /**
     * Adds a value to property AccrualPeriodicity from an instance of Frequency 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDcAccrualPeriodicity(Frequency value) {
		Base.add(this.model, this.getResource(), ACCRUALPERIODICITY, value);
	}
  

    /**
     * Sets a value of property AccrualPeriodicity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDcAccrualPeriodicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACCRUALPERIODICITY, value);
	}
	
    /**
     * Sets a value of property AccrualPeriodicity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDcAccrualPeriodicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACCRUALPERIODICITY, value);
	}
    /**
     * Sets a value of property AccrualPeriodicity from an instance of Frequency 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDcAccrualPeriodicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Frequency value) {
		Base.set(model, instanceResource, ACCRUALPERIODICITY, value);
	}
	
    /**
     * Sets a value of property AccrualPeriodicity from an instance of Frequency 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDcAccrualPeriodicity(Frequency value) {
		Base.set(this.model, this.getResource(), ACCRUALPERIODICITY, value);
	}
  


    /**
     * Removes a value of property AccrualPeriodicity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDcAccrualPeriodicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACCRUALPERIODICITY, value);
	}
	
    /**
     * Removes a value of property AccrualPeriodicity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDcAccrualPeriodicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACCRUALPERIODICITY, value);
	}
    /**
     * Removes a value of property AccrualPeriodicity given as an instance of Frequency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDcAccrualPeriodicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Frequency value) {
		Base.remove(model, instanceResource, ACCRUALPERIODICITY, value);
	}
	
    /**
     * Removes a value of property AccrualPeriodicity given as an instance of Frequency 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDcAccrualPeriodicity(Frequency value) {
		Base.remove(this.model, this.getResource(), ACCRUALPERIODICITY, value);
	}
  
    /**
     * Removes all values of property AccrualPeriodicity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDcAccrualPeriodicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACCRUALPERIODICITY);
	}
	
    /**
     * Removes all values of property AccrualPeriodicity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDcAccrualPeriodicity() {
		Base.removeAll(this.model, this.getResource(), ACCRUALPERIODICITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c9d17e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDcAccrualPolicy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACCRUALPOLICY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c9d17e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDcAccrualPolicy() {
		return Base.has(this.model, this.getResource(), ACCRUALPOLICY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c9d17e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDcAccrualPolicy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCRUALPOLICY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c9d17e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDcAccrualPolicy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCRUALPOLICY);
	}

     /**
     * Get all values of property AccrualPolicy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualPolicy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACCRUALPOLICY);
	}
	
    /**
     * Get all values of property AccrualPolicy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualPolicy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCRUALPOLICY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AccrualPolicy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualPolicy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCRUALPOLICY);
	}

    /**
     * Get all values of property AccrualPolicy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDcAccrualPolicy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCRUALPOLICY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AccrualPolicy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Policy> getAllDcAccrualPolicy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACCRUALPOLICY, Policy.class);
	}
	
    /**
     * Get all values of property AccrualPolicy as a ReactorResult of Policy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Policy> getAllDcAccrualPolicy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCRUALPOLICY, Policy.class);
	}

    /**
     * Get all values of property AccrualPolicy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Policy> getAllDcAccrualPolicy() {
		return Base.getAll(this.model, this.getResource(), ACCRUALPOLICY, Policy.class);
	}

    /**
     * Get all values of property AccrualPolicy as a ReactorResult of Policy 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Policy> getAllDcAccrualPolicy_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCRUALPOLICY, Policy.class);
	}
 
    /**
     * Adds a value to property AccrualPolicy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDcAccrualPolicy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACCRUALPOLICY, value);
	}
	
    /**
     * Adds a value to property AccrualPolicy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDcAccrualPolicy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACCRUALPOLICY, value);
	}
    /**
     * Adds a value to property AccrualPolicy from an instance of Policy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDcAccrualPolicy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Policy value) {
		Base.add(model, instanceResource, ACCRUALPOLICY, value);
	}
	
    /**
     * Adds a value to property AccrualPolicy from an instance of Policy 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDcAccrualPolicy(Policy value) {
		Base.add(this.model, this.getResource(), ACCRUALPOLICY, value);
	}
  

    /**
     * Sets a value of property AccrualPolicy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDcAccrualPolicy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACCRUALPOLICY, value);
	}
	
    /**
     * Sets a value of property AccrualPolicy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDcAccrualPolicy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACCRUALPOLICY, value);
	}
    /**
     * Sets a value of property AccrualPolicy from an instance of Policy 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDcAccrualPolicy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Policy value) {
		Base.set(model, instanceResource, ACCRUALPOLICY, value);
	}
	
    /**
     * Sets a value of property AccrualPolicy from an instance of Policy 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDcAccrualPolicy(Policy value) {
		Base.set(this.model, this.getResource(), ACCRUALPOLICY, value);
	}
  


    /**
     * Removes a value of property AccrualPolicy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDcAccrualPolicy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACCRUALPOLICY, value);
	}
	
    /**
     * Removes a value of property AccrualPolicy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDcAccrualPolicy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACCRUALPOLICY, value);
	}
    /**
     * Removes a value of property AccrualPolicy given as an instance of Policy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDcAccrualPolicy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Policy value) {
		Base.remove(model, instanceResource, ACCRUALPOLICY, value);
	}
	
    /**
     * Removes a value of property AccrualPolicy given as an instance of Policy 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDcAccrualPolicy(Policy value) {
		Base.remove(this.model, this.getResource(), ACCRUALPOLICY, value);
	}
  
    /**
     * Removes all values of property AccrualPolicy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDcAccrualPolicy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACCRUALPOLICY);
	}
	
    /**
     * Removes all values of property AccrualPolicy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDcAccrualPolicy() {
		Base.removeAll(this.model, this.getResource(), ACCRUALPOLICY);
	}
 }