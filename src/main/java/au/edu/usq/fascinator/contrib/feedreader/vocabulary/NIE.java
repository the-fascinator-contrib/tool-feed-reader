/* CVS $Id: $ */
package au.edu.usq.fascinator.contrib.feedreader.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from http://www.semanticdesktop.org/ontologies/2007/01/19/nie/ 
 * @author Auto-generated by schemagen on 02 Aug 2010 13:00 
 */
public class NIE {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>The overall size of the data object in bytes. That means the WHOLE data object 
     *  and ONLY the data object, not of the content that is of interest to the user. 
     *  For cases where the content size is different (e.g. in compressed files the 
     *  content is larger, in messages the content excludes headings and is smaller) 
     *  use more specific properties, not necessarily subproperties of this one.</p>
     */
    public static final Property byteSize = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize" );
    
    /** <p>Characterset in which the content of the InformationElement was created. Example: 
     *  ISO-8859-1, UTF-8. One of the registered character sets at http://www.iana.org/assignments/character-sets. 
     *  This characterSet is used to interpret any textual parts of the content. If 
     *  more than one characterSet is used within one data object, use more specific 
     *  properties.</p>
     */
    public static final Property characterSet = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet" );
    
    /** <p>A user comment about an InformationElement.</p> */
    public static final Property comment = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment" );
    
    /** <p>The date of the content creation. This may not necessarily be equal to the 
     *  date when the DataObject (i.e. the physical representation) itself was created. 
     *  Compare with nie:created property.</p>
     */
    public static final Property contentCreated = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated" );
    
    /** <p>The date of the last modification of the content.</p> */
    public static final Property contentLastModified = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified" );
    
    /** <p>The size of the content. This property can be used whenever the size of the 
     *  content of an InformationElement differs from the size of the DataObject. 
     *  (e.g. because of compression, encoding, encryption or any other representation 
     *  issues). The contentSize in expressed in bytes.</p>
     */
    public static final Property contentSize = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize" );
    
    /** <p>Content copyright</p> */
    public static final Property copyright = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright" );
    
    /** <p>Date of creation of the DataObject. Note that this date refers to the creation 
     *  of the DataObject itself (i.e. the physical representation). Compare with 
     *  nie:contentCreated.</p>
     */
    public static final Property created = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created" );
    
    /** <p>Marks the provenance of a DataObject, what source does a data object come 
     *  from.</p>
     */
    public static final Property dataSource = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource" );
    
    /** <p>Dependency relation. A piece of content depends on another piece of data in 
     *  order to be properly understood/used/interpreted.</p>
     */
    public static final Property depends = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends" );
    
    /** <p>A textual description of the resource. This property may be used for any metadata 
     *  fields that provide some meta-information or comment about a resource in the 
     *  form of a passage of text. This property is not to be confused with nie:plainTextContent. 
     *  Use more specific subproperties wherever possible.</p>
     */
    public static final Property description = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description" );
    
    /** <p>A disclaimer</p> */
    public static final Property disclaimer = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer" );
    
    /** <p>Software used to "generate" the contents. E.g. a word processor name.</p> */
    public static final Property generator = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator" );
    
    /** <p>A common superproperty for all settings used by the generating software. This 
     *  may include compression settings, algorithms, autosave, interlaced/non-interlaced 
     *  etc. Note that this property has no range specified and therefore should not 
     *  be used directly. Always use more specific properties.</p>
     */
    public static final Property generatorOption = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generatorOption" );
    
    /** <p>Generic property used to express 'logical' containment relationships between 
     *  InformationElements. NIE extensions are encouraged to provide more specific 
     *  subproperties of this one. It is advisable for actual instances of InformationElement 
     *  to use those specific subproperties. Note the difference between 'physical' 
     *  containment (hasPart) and logical containment (hasLogicalPart)</p>
     */
    public static final Property hasLogicalPart = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart" );
    
    /** <p>Generic property used to express 'physical' containment relationships between 
     *  DataObjects. NIE extensions are encouraged to provide more specific subproperties 
     *  of this one. It is advisable for actual instances of DataObjects to use those 
     *  specific subproperties. Note to the developers: Please be aware of the distinction 
     *  between containment relation and provenance. The hasPart relation models physical 
     *  containment, an InformationElement (a nmo:Message) can have a 'physical' part 
     *  (an nfo:Attachment). Also, please note the difference between physical containment 
     *  (hasPart) and logical containment (hasLogicalPart) the former has more strict 
     *  meaning. They may occur independently of each other.</p>
     */
    public static final Property hasPart = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart" );
    
    /** <p>An unambiguous reference to the InformationElement within a given context. 
     *  Recommended best practice is to identify the resource by means of a string 
     *  conforming to a formal identification system.</p>
     */
    public static final Property identifier = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier" );
    
    /** <p>A point or period of time associated with an event in the lifecycle of an 
     *  Information Element. A common superproperty for all date-related properties 
     *  of InformationElements in the NIE Framework.</p>
     */
    public static final Property informationElementDate = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate" );
    
    /** <p>Links the DataObject with the InformationElement it is interpreted as.</p> */
    public static final Property interpretedAs = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs" );
    
    /** <p>Generic property used to express 'logical' containment relationships between 
     *  DataObjects. NIE extensions are encouraged to provide more specific subproperties 
     *  of this one. It is advisable for actual instances of InformationElement to 
     *  use those specific subproperties. Note the difference between 'physical' containment 
     *  (isPartOf) and logical containment (isLogicalPartOf)</p>
     */
    public static final Property isLogicalPartOf = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf" );
    
    /** <p>Generic property used to express containment relationships between DataObjects. 
     *  NIE extensions are encouraged to provide more specific subproperties of this 
     *  one. It is advisable for actual instances of DataObjects to use those specific 
     *  subproperties. Note to the developers: Please be aware of the distinction 
     *  between containment relation and provenance. The isPartOf relation models 
     *  physical containment, a nie:DataObject (e.g. an nfo:Attachment) is a 'physical' 
     *  part of an nie:InformationElement (a nmo:Message). Also, please note the difference 
     *  between physical containment (isPartOf) and logical containment (isLogicalPartOf) 
     *  the former has more strict meaning. They may occur independently of each other.</p>
     */
    public static final Property isPartOf = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf" );
    
    /** <p>Links the information element with the DataObject it is stored in.</p> */
    public static final Property isStoredAs = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs" );
    
    /** <p>Adapted DublinCore: The topic of the content of the resource, as keyword. 
     *  No sentences here. Recommended best practice is to select a value from a controlled 
     *  vocabulary or formal classification scheme.</p>
     */
    public static final Property keyword = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword" );
    
    /** <p>Language the InformationElement is expressed in. This property applies to 
     *  the data object in its entirety. If the data object is divisible into parts 
     *  expressed in multiple languages - more specific properties should be used. 
     *  Users are encouraged to use the two-letter code specified in the RFC 3066</p>
     */
    public static final Property language = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language" );
    
    /** <p>Date when information about this data object was retrieved (for the first 
     *  time) or last refreshed from the data source. This property is important for 
     *  metadata extraction applications that don't receive any notifications of changes 
     *  in the data source and have to poll it regularly. This may lead to information 
     *  becoming out of date. In these cases this property may be used to determine 
     *  the age of data, which is an important element of it's dependability.</p>
     */
    public static final Property lastRefreshed = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed" );
    
    /** <p>A common superproperty for all properties that point at legal information 
     *  about an Information Element</p>
     */
    public static final Property legal = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal" );
    
    /** <p>Terms and intellectual property rights licensing conditions.</p> */
    public static final Property license = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license" );
    
    /** <p>The type of the license. Possible values for this field may include "GPL", 
     *  "BSD", "Creative Commons" etc.</p>
     */
    public static final Property licenseType = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType" );
    
    /** <p>A linking relation. A piece of content links/mentions a piece of data</p> */
    public static final Property links = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links" );
    
    /** <p>The mime type of the resource, if available. Example: "text/plain". See http://www.iana.org/assignments/media-types/. 
     *  This property applies to data objects that can be described with one mime 
     *  type. In cases where the object as a whole has one mime type, while it's parts 
     *  have other mime types, or there is no mime type that can be applied to the 
     *  object as a whole, but some parts of the content have mime types - use more 
     *  specific properties.</p>
     */
    public static final Property mimeType = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType" );
    
    /** <p>Plain-text representation of the content of a InformationElement with all 
     *  markup removed. The main purpose of this property is full-text indexing and 
     *  search. Its exact content is considered application-specific. The user can 
     *  make no assumptions about what is and what is not contained within. Applications 
     *  should use more specific properties wherever possible.</p>
     */
    public static final Property plainTextContent = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent" );
    
    /** <p>A common superproperty for all relations between a piece of content and other 
     *  pieces of data (which may be interpreted as other pieces of content).</p>
     */
    public static final Property relatedTo = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo" );
    
    /** <p>DataObjects extracted from a single data source are organized into a containment 
     *  tree. This property links the root of that tree with the datasource it has 
     *  been extracted from</p>
     */
    public static final Property rootElementOf = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf" );
    
    /** <p>An overall topic of the content of a InformationElement</p> */
    public static final Property subject = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject" );
    
    /** <p>Name given to an InformationElement</p> */
    public static final Property title = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title" );
    
    /** <p>The current version of the given data object. Exact semantics is unspecified 
     *  at this level. Use more specific subproperties if needed.</p>
     */
    public static final Property version = m_model.createProperty( "http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version" );
    
}
