/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 29/04/10 2:21 PM
 */
package au.edu.usq.fascinator.contrib.feedreader.vocabulary.nie;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>AccessRights</li>
 * <li>Copyright</li>
 * <li>Date</li>
 * <li>Depends</li>
 * <li>Disclaimer</li>
 * <li>Elements1_1Description</li>
 * <li>Elements1_1Subject</li>
 * <li>Identifier</li>
 * <li>InverseProperty</li>
 * <li>Language</li>
 * <li>License</li>
 * <li>LicenseType</li>
 * <li>MaxCardinality</li>
 * <li>MinCardinality</li>
 * <li>NaoIdentifier</li>
 * <li>NieLicense</li>
 * <li>Part</li>
 * <li>Relation</li>
 * <li>Rights</li>
 * <li>Source</li>
 * <li>TermsCreated</li>
 * <li>TermsIsPartOf</li>
 * <li>TermsVersion</li>
 * <li>Title</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 29/04/10 2:21 PM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    @SuppressWarnings("hiding")
    public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class",
            false);

    /** http://purl.org/dc/terms/accessRights */
    @SuppressWarnings("hiding")
    public static final URI ACCESSRIGHTS = new URIImpl("http://purl.org/dc/terms/accessRights",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright */
    @SuppressWarnings("hiding")
    public static final URI COPYRIGHT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright",
            false);

    /** http://purl.org/dc/elements/1.1/date */
    @SuppressWarnings("hiding")
    public static final URI DATE = new URIImpl("http://purl.org/dc/elements/1.1/date",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends */
    @SuppressWarnings("hiding")
    public static final URI DEPENDS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer */
    @SuppressWarnings("hiding")
    public static final URI DISCLAIMER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer",
            false);

    /** http://purl.org/dc/elements/1.1/description */
    @SuppressWarnings("hiding")
    public static final URI ELEMENTS1_1DESCRIPTION = new URIImpl("http://purl.org/dc/elements/1.1/description",
            false);

    /** http://purl.org/dc/elements/1.1/subject */
    @SuppressWarnings("hiding")
    public static final URI ELEMENTS1_1SUBJECT = new URIImpl("http://purl.org/dc/elements/1.1/subject",
            false);

    /** http://purl.org/dc/elements/1.1/identifier */
    @SuppressWarnings("hiding")
    public static final URI IDENTIFIER = new URIImpl("http://purl.org/dc/elements/1.1/identifier",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#inverseProperty */
    @SuppressWarnings("hiding")
    public static final URI INVERSEPROPERTY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#inverseProperty",
            false);

    /** http://purl.org/dc/elements/1.1/language */
    @SuppressWarnings("hiding")
    public static final URI LANGUAGE = new URIImpl("http://purl.org/dc/elements/1.1/language",
            false);

    /** http://purl.org/dc/terms/license */
    @SuppressWarnings("hiding")
    public static final URI LICENSE = new URIImpl("http://purl.org/dc/terms/license",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType */
    @SuppressWarnings("hiding")
    public static final URI LICENSETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#maxCardinality */
    @SuppressWarnings("hiding")
    public static final URI MAXCARDINALITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#maxCardinality",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#minCardinality */
    @SuppressWarnings("hiding")
    public static final URI MINCARDINALITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#minCardinality",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier */
    @SuppressWarnings("hiding")
    public static final URI NAOIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier",
            false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license */
    @SuppressWarnings("hiding")
    public static final URI NIELICENSE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license",
            false);

    /** http://purl.org/dc/terms/hasPart */
    @SuppressWarnings("hiding")
    public static final URI PART = new URIImpl("http://purl.org/dc/terms/hasPart",
            false);

    /** http://purl.org/dc/elements/1.1/relation */
    @SuppressWarnings("hiding")
    public static final URI RELATION = new URIImpl("http://purl.org/dc/elements/1.1/relation",
            false);

    /** http://purl.org/dc/elements/1.1/rights */
    @SuppressWarnings("hiding")
    public static final URI RIGHTS = new URIImpl("http://purl.org/dc/elements/1.1/rights",
            false);

    /** http://purl.org/dc/elements/1.1/source */
    @SuppressWarnings("hiding")
    public static final URI SOURCE = new URIImpl("http://purl.org/dc/elements/1.1/source",
            false);

    /** http://purl.org/dc/terms/created */
    @SuppressWarnings("hiding")
    public static final URI TERMSCREATED = new URIImpl("http://purl.org/dc/terms/created",
            false);

    /** http://purl.org/dc/terms/isPartOf */
    @SuppressWarnings("hiding")
    public static final URI TERMSISPARTOF = new URIImpl("http://purl.org/dc/terms/isPartOf",
            false);

    /** http://purl.org/dc/terms/hasVersion */
    @SuppressWarnings("hiding")
    public static final URI TERMSVERSION = new URIImpl("http://purl.org/dc/terms/hasVersion",
            false);

    /** http://purl.org/dc/elements/1.1/title */
    @SuppressWarnings("hiding")
    public static final URI TITLE = new URIImpl("http://purl.org/dc/elements/1.1/title",
            false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
            new URIImpl("http://purl.org/dc/terms/accessRights", false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright",
                    false),
            new URIImpl("http://purl.org/dc/elements/1.1/date", false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer",
                    false),
            new URIImpl("http://purl.org/dc/elements/1.1/description", false),
            new URIImpl("http://purl.org/dc/elements/1.1/subject", false),
            new URIImpl("http://purl.org/dc/elements/1.1/identifier", false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#inverseProperty",
                    false),
            new URIImpl("http://purl.org/dc/elements/1.1/language", false),
            new URIImpl("http://purl.org/dc/terms/license", false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#maxCardinality",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#minCardinality",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier",
                    false),
            new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license",
                    false),
            new URIImpl("http://purl.org/dc/terms/hasPart", false),
            new URIImpl("http://purl.org/dc/elements/1.1/relation", false),
            new URIImpl("http://purl.org/dc/elements/1.1/rights", false),
            new URIImpl("http://purl.org/dc/elements/1.1/source", false),
            new URIImpl("http://purl.org/dc/terms/created", false),
            new URIImpl("http://purl.org/dc/terms/isPartOf", false),
            new URIImpl("http://purl.org/dc/terms/hasVersion", false),
            new URIImpl("http://purl.org/dc/elements/1.1/title", false) };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Thing(Model model,
            URI classURI,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write) {
        super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Thing(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write) {
        super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Thing(Model model, String uriString, boolean write)
            throws ModelRuntimeException {
        super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Thing(Model model, BlankNode bnode, boolean write) {
        super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Thing(Model model, boolean write) {
        super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Thing or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Thing getInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getInstance(model, instanceResource, Thing.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.w3.org/2000/01/rdf-schema#Class).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
            Model model) {
        return Base.getAllInstances(model,
                RDFS_CLASS,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     * 
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
        return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class);
    }

    /**
     * Remove rdf:type Thing from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'AccessRights' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoAccessRights_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.ACCESSRIGHTS, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'AccessRights' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoAccessRights_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.ACCESSRIGHTS, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'AccessRights'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoAccessRights_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.ACCESSRIGHTS,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoDate_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.DATE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoDate_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.DATE, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoDate_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.DATE,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation
     *         'Elements1_1Description' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoElements1_1Description_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model,
                Thing.ELEMENTS1_1DESCRIPTION,
                objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation
     *         'Elements1_1Description' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoElements1_1Description_Inverse() {
        return Base.getAll_Inverse(this.model,
                Thing.ELEMENTS1_1DESCRIPTION,
                this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation
     *         'Elements1_1Description' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoElements1_1Description_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.ELEMENTS1_1DESCRIPTION,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation
     *         'Elements1_1Subject' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoElements1_1Subject_Inverse(
            Model model, Object objectValue) {
        return Base
                .getAll_Inverse(model, Thing.ELEMENTS1_1SUBJECT, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation
     *         'Elements1_1Subject' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoElements1_1Subject_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.ELEMENTS1_1SUBJECT, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation
     *         'Elements1_1Subject' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoElements1_1Subject_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.ELEMENTS1_1SUBJECT,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Identifier' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoIdentifier_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.IDENTIFIER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Identifier' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoIdentifier_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.IDENTIFIER, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Identifier' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoIdentifier_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.IDENTIFIER,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'InverseProperty'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoInverseProperty_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.INVERSEPROPERTY, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'InverseProperty'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoInverseProperty_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.INVERSEPROPERTY, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation
     *         'InverseProperty' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoInverseProperty_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.INVERSEPROPERTY,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Language' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoLanguage_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.LANGUAGE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Language' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoLanguage_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.LANGUAGE, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Language' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoLanguage_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.LANGUAGE,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'License' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoLicense_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.LICENSE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'License' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoLicense_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.LICENSE, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'License' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoLicense_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.LICENSE,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'MaxCardinality'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoMaxCardinality_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.MAXCARDINALITY, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'MaxCardinality'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoMaxCardinality_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.MAXCARDINALITY, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'MaxCardinality'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoMaxCardinality_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.MAXCARDINALITY,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'MinCardinality'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoMinCardinality_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.MINCARDINALITY, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'MinCardinality'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoMinCardinality_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.MINCARDINALITY, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'MinCardinality'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoMinCardinality_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.MINCARDINALITY,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'NaoIdentifier' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoNaoIdentifier_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.NAOIDENTIFIER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'NaoIdentifier' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoNaoIdentifier_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.NAOIDENTIFIER, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'NaoIdentifier'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoNaoIdentifier_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.NAOIDENTIFIER,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Part' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoPart_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.PART, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Part' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoPart_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.PART, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Part' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoPart_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.PART,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Relation' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoRelation_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.RELATION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Relation' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoRelation_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.RELATION, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Relation' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoRelation_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.RELATION,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Rights' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoRights_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.RIGHTS, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Rights' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoRights_Inverse() {
        return Base
                .getAll_Inverse(this.model, Thing.RIGHTS, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Rights' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoRights_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.RIGHTS,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Source' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoSource_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.SOURCE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Source' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoSource_Inverse() {
        return Base
                .getAll_Inverse(this.model, Thing.SOURCE, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Source' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoSource_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.SOURCE,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'TermsCreated' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsCreated_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.TERMSCREATED, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'TermsCreated' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsCreated_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.TERMSCREATED, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'TermsCreated'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsCreated_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.TERMSCREATED,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'TermsIsPartOf' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsIsPartOf_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.TERMSISPARTOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'TermsIsPartOf' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsIsPartOf_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.TERMSISPARTOF, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'TermsIsPartOf'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsIsPartOf_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.TERMSISPARTOF,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'TermsVersion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsVersion_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.TERMSVERSION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'TermsVersion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsVersion_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.TERMSVERSION, this
                .getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'TermsVersion'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoTermsVersion_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.TERMSVERSION,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoTitle_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model, Thing.TITLE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoTitle_Inverse() {
        return Base.getAll_Inverse(this.model, Thing.TITLE, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoTitle_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                Thing.TITLE,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'GeneratorOption'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoGeneratorOption_Inverse(
            Model model, Object objectValue) {
        return Base.getAll_Inverse(model,
                InformationElement.GENERATOROPTION,
                objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'GeneratorOption'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNepoGeneratorOption_Inverse() {
        return Base.getAll_Inverse(this.model,
                InformationElement.GENERATOROPTION,
                this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation
     *         'GeneratorOption' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNepoGeneratorOption_Inverse_as(
            Model model, Object objectValue) {
        return Base.getAll_Inverse_as(model,
                InformationElement.GENERATOROPTION,
                objectValue,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@665e2517 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ACCESSRIGHTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@665e2517 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoAccessRights() {
        return Base.has(this.model, this.getResource(), ACCESSRIGHTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@665e2517 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ACCESSRIGHTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@665e2517 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoAccessRights(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), ACCESSRIGHTS);
    }

    /**
     * Get all values of property AccessRights as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoAccessRights_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ACCESSRIGHTS);
    }

    /**
     * Get all values of property AccessRights as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoAccessRights_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ACCESSRIGHTS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property AccessRights as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoAccessRights_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), ACCESSRIGHTS);
    }

    /**
     * Get all values of property AccessRights as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoAccessRights_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ACCESSRIGHTS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property AccessRights * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, ACCESSRIGHTS, Thing.class);
    }

    /**
     * Get all values of property AccessRights as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoAccessRights_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ACCESSRIGHTS,
                Thing.class);
    }

    /**
     * Get all values of property AccessRights * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoAccessRights() {
        return Base.getAll(this.model,
                this.getResource(),
                ACCESSRIGHTS,
                Thing.class);
    }

    /**
     * Get all values of property AccessRights as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoAccessRights_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ACCESSRIGHTS,
                Thing.class);
    }

    /**
     * Adds a value to property AccessRights as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ACCESSRIGHTS, value);
    }

    /**
     * Adds a value to property AccessRights as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoAccessRights(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ACCESSRIGHTS, value);
    }

    /**
     * Adds a value to property AccessRights from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, ACCESSRIGHTS, value);
    }

    /**
     * Adds a value to property AccessRights from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoAccessRights(Thing value) {
        Base.add(this.model, this.getResource(), ACCESSRIGHTS, value);
    }

    /**
     * Sets a value of property AccessRights from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ACCESSRIGHTS, value);
    }

    /**
     * Sets a value of property AccessRights from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoAccessRights(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ACCESSRIGHTS, value);
    }

    /**
     * Sets a value of property AccessRights from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, ACCESSRIGHTS, value);
    }

    /**
     * Sets a value of property AccessRights from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoAccessRights(Thing value) {
        Base.set(this.model, this.getResource(), ACCESSRIGHTS, value);
    }

    /**
     * Removes a value of property AccessRights as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ACCESSRIGHTS, value);
    }

    /**
     * Removes a value of property AccessRights as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoAccessRights(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), ACCESSRIGHTS, value);
    }

    /**
     * Removes a value of property AccessRights given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, ACCESSRIGHTS, value);
    }

    /**
     * Removes a value of property AccessRights given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoAccessRights(Thing value) {
        Base.remove(this.model, this.getResource(), ACCESSRIGHTS, value);
    }

    /**
     * Removes all values of property AccessRights * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoAccessRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ACCESSRIGHTS);
    }

    /**
     * Removes all values of property AccessRights * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoAccessRights() {
        Base.removeAll(this.model, this.getResource(), ACCESSRIGHTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@277f4790 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, COPYRIGHT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@277f4790 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoCopyright() {
        return Base.has(this.model, this.getResource(), COPYRIGHT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@277f4790 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, COPYRIGHT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@277f4790 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoCopyright(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), COPYRIGHT);
    }

    /**
     * Get all values of property Copyright as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoCopyright_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, COPYRIGHT);
    }

    /**
     * Get all values of property Copyright as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoCopyright_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                COPYRIGHT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Copyright as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoCopyright_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), COPYRIGHT);
    }

    /**
     * Get all values of property Copyright as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoCopyright_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                COPYRIGHT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Copyright * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoCopyright(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                COPYRIGHT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Copyright as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoCopyright_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                COPYRIGHT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Copyright * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoCopyright() {
        return Base.getAll(this.model,
                this.getResource(),
                COPYRIGHT,
                java.lang.String.class);
    }

    /**
     * Get all values of property Copyright as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoCopyright_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                COPYRIGHT,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Copyright as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, COPYRIGHT, value);
    }

    /**
     * Adds a value to property Copyright as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoCopyright(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), COPYRIGHT, value);
    }

    /**
     * Adds a value to property Copyright from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, COPYRIGHT, value);
    }

    /**
     * Adds a value to property Copyright from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoCopyright(java.lang.String value) {
        Base.add(this.model, this.getResource(), COPYRIGHT, value);
    }

    /**
     * Sets a value of property Copyright from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, COPYRIGHT, value);
    }

    /**
     * Sets a value of property Copyright from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoCopyright(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), COPYRIGHT, value);
    }

    /**
     * Sets a value of property Copyright from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, COPYRIGHT, value);
    }

    /**
     * Sets a value of property Copyright from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoCopyright(java.lang.String value) {
        Base.set(this.model, this.getResource(), COPYRIGHT, value);
    }

    /**
     * Removes a value of property Copyright as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, COPYRIGHT, value);
    }

    /**
     * Removes a value of property Copyright as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoCopyright(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), COPYRIGHT, value);
    }

    /**
     * Removes a value of property Copyright given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, COPYRIGHT, value);
    }

    /**
     * Removes a value of property Copyright given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoCopyright(java.lang.String value) {
        Base.remove(this.model, this.getResource(), COPYRIGHT, value);
    }

    /**
     * Removes all values of property Copyright * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoCopyright(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, COPYRIGHT);
    }

    /**
     * Removes all values of property Copyright * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoCopyright() {
        Base.removeAll(this.model, this.getResource(), COPYRIGHT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@615ece16 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@615ece16 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoDate() {
        return Base.has(this.model, this.getResource(), DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@615ece16 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@615ece16 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoDate(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), DATE);
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoDate_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, DATE);
    }

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoDate_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                DATE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoDate_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), DATE);
    }

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoDate_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                DATE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, DATE, Thing.class);
    }

    /**
     * Get all values of property Date as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoDate_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, DATE, Thing.class);
    }

    /**
     * Get all values of property Date * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoDate() {
        return Base.getAll(this.model, this.getResource(), DATE, Thing.class);
    }

    /**
     * Get all values of property Date as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoDate_as() {
        return Base
                .getAll_as(this.model, this.getResource(), DATE, Thing.class);
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, DATE, value);
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoDate(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), DATE, value);
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, DATE, value);
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoDate(Thing value) {
        Base.add(this.model, this.getResource(), DATE, value);
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, DATE, value);
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoDate(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), DATE, value);
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, DATE, value);
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoDate(Thing value) {
        Base.set(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, DATE, value);
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoDate(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, DATE, value);
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoDate(Thing value) {
        Base.remove(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoDate(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, DATE);
    }

    /**
     * Removes all values of property Date * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllNepoDate() {
        Base.removeAll(this.model, this.getResource(), DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a785526 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, DEPENDS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a785526 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoDepends() {
        return Base.has(this.model, this.getResource(), DEPENDS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a785526 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, DEPENDS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a785526 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoDepends(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), DEPENDS);
    }

    /**
     * Get all values of property Depends as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoDepends_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, DEPENDS);
    }

    /**
     * Get all values of property Depends as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoDepends_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                DEPENDS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Depends as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoDepends_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), DEPENDS);
    }

    /**
     * Get all values of property Depends as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoDepends_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                DEPENDS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Depends * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<DataObject> getAllNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, DEPENDS, DataObject.class);
    }

    /**
     * Get all values of property Depends as a ReactorResult of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<DataObject> getAllNepoDepends_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                DEPENDS,
                DataObject.class);
    }

    /**
     * Get all values of property Depends * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<DataObject> getAllNepoDepends() {
        return Base.getAll(this.model,
                this.getResource(),
                DEPENDS,
                DataObject.class);
    }

    /**
     * Get all values of property Depends as a ReactorResult of DataObject
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<DataObject> getAllNepoDepends_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                DEPENDS,
                DataObject.class);
    }

    /**
     * Adds a value to property Depends as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, DEPENDS, value);
    }

    /**
     * Adds a value to property Depends as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoDepends(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), DEPENDS, value);
    }

    /**
     * Adds a value to property Depends from an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.add(model, instanceResource, DEPENDS, value);
    }

    /**
     * Adds a value to property Depends from an instance of DataObject
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoDepends(DataObject value) {
        Base.add(this.model, this.getResource(), DEPENDS, value);
    }

    /**
     * Sets a value of property Depends from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, DEPENDS, value);
    }

    /**
     * Sets a value of property Depends from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoDepends(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), DEPENDS, value);
    }

    /**
     * Sets a value of property Depends from an instance of DataObject First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.set(model, instanceResource, DEPENDS, value);
    }

    /**
     * Sets a value of property Depends from an instance of DataObject First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoDepends(DataObject value) {
        Base.set(this.model, this.getResource(), DEPENDS, value);
    }

    /**
     * Removes a value of property Depends as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, DEPENDS, value);
    }

    /**
     * Removes a value of property Depends as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoDepends(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), DEPENDS, value);
    }

    /**
     * Removes a value of property Depends given as an instance of DataObject
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            DataObject value) {
        Base.remove(model, instanceResource, DEPENDS, value);
    }

    /**
     * Removes a value of property Depends given as an instance of DataObject
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoDepends(DataObject value) {
        Base.remove(this.model, this.getResource(), DEPENDS, value);
    }

    /**
     * Removes all values of property Depends * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoDepends(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, DEPENDS);
    }

    /**
     * Removes all values of property Depends * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoDepends() {
        Base.removeAll(this.model, this.getResource(), DEPENDS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62ecd2de has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, DISCLAIMER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62ecd2de has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoDisclaimer() {
        return Base.has(this.model, this.getResource(), DISCLAIMER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62ecd2de has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, DISCLAIMER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62ecd2de has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoDisclaimer(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), DISCLAIMER);
    }

    /**
     * Get all values of property Disclaimer as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoDisclaimer_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, DISCLAIMER);
    }

    /**
     * Get all values of property Disclaimer as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoDisclaimer_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                DISCLAIMER,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Disclaimer as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoDisclaimer_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), DISCLAIMER);
    }

    /**
     * Get all values of property Disclaimer as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoDisclaimer_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                DISCLAIMER,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Disclaimer * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoDisclaimer(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                DISCLAIMER,
                java.lang.String.class);
    }

    /**
     * Get all values of property Disclaimer as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoDisclaimer_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                DISCLAIMER,
                java.lang.String.class);
    }

    /**
     * Get all values of property Disclaimer * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoDisclaimer() {
        return Base.getAll(this.model,
                this.getResource(),
                DISCLAIMER,
                java.lang.String.class);
    }

    /**
     * Get all values of property Disclaimer as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoDisclaimer_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                DISCLAIMER,
                java.lang.String.class);
    }

    /**
     * Adds a value to property Disclaimer as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, DISCLAIMER, value);
    }

    /**
     * Adds a value to property Disclaimer as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoDisclaimer(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), DISCLAIMER, value);
    }

    /**
     * Adds a value to property Disclaimer from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, DISCLAIMER, value);
    }

    /**
     * Adds a value to property Disclaimer from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoDisclaimer(java.lang.String value) {
        Base.add(this.model, this.getResource(), DISCLAIMER, value);
    }

    /**
     * Sets a value of property Disclaimer from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, DISCLAIMER, value);
    }

    /**
     * Sets a value of property Disclaimer from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoDisclaimer(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), DISCLAIMER, value);
    }

    /**
     * Sets a value of property Disclaimer from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, DISCLAIMER, value);
    }

    /**
     * Sets a value of property Disclaimer from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoDisclaimer(java.lang.String value) {
        Base.set(this.model, this.getResource(), DISCLAIMER, value);
    }

    /**
     * Removes a value of property Disclaimer as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, DISCLAIMER, value);
    }

    /**
     * Removes a value of property Disclaimer as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoDisclaimer(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), DISCLAIMER, value);
    }

    /**
     * Removes a value of property Disclaimer given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, DISCLAIMER, value);
    }

    /**
     * Removes a value of property Disclaimer given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoDisclaimer(java.lang.String value) {
        Base.remove(this.model, this.getResource(), DISCLAIMER, value);
    }

    /**
     * Removes all values of property Disclaimer * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoDisclaimer(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, DISCLAIMER);
    }

    /**
     * Removes all values of property Disclaimer * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoDisclaimer() {
        Base.removeAll(this.model, this.getResource(), DISCLAIMER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5faa076a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ELEMENTS1_1DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5faa076a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoElements1_1Description() {
        return Base.has(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5faa076a has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ELEMENTS1_1DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5faa076a has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoElements1_1Description(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model,
                this.getResource(),
                ELEMENTS1_1DESCRIPTION);
    }

    /**
     * Get all values of property Elements1_1Description as an Iterator over
     * RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoElements1_1Description_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model,
                instanceResource,
                ELEMENTS1_1DESCRIPTION);
    }

    /**
     * Get all values of property Elements1_1Description as a ReactorResult of
     * RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoElements1_1Description_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ELEMENTS1_1DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Elements1_1Description as an Iterator over
     * RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoElements1_1Description_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                ELEMENTS1_1DESCRIPTION);
    }

    /**
     * Get all values of property Elements1_1Description as a ReactorResult of
     * RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoElements1_1Description_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ELEMENTS1_1DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Elements1_1Description * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoElements1_1Description(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                ELEMENTS1_1DESCRIPTION,
                Thing.class);
    }

    /**
     * Get all values of property Elements1_1Description as a ReactorResult of
     * Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoElements1_1Description_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ELEMENTS1_1DESCRIPTION,
                Thing.class);
    }

    /**
     * Get all values of property Elements1_1Description * @return a
     * ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoElements1_1Description() {
        return Base.getAll(this.model,
                this.getResource(),
                ELEMENTS1_1DESCRIPTION,
                Thing.class);
    }

    /**
     * Get all values of property Elements1_1Description as a ReactorResult of
     * Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoElements1_1Description_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ELEMENTS1_1DESCRIPTION,
                Thing.class);
    }

    /**
     * Adds a value to property Elements1_1Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Adds a value to property Elements1_1Description as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoElements1_1Description(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Adds a value to property Elements1_1Description from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Adds a value to property Elements1_1Description from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoElements1_1Description(Thing value) {
        Base.add(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Sets a value of property Elements1_1Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Sets a value of property Elements1_1Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoElements1_1Description(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Sets a value of property Elements1_1Description from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Sets a value of property Elements1_1Description from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoElements1_1Description(Thing value) {
        Base.set(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Removes a value of property Elements1_1Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Removes a value of property Elements1_1Description as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoElements1_1Description(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model,
                this.getResource(),
                ELEMENTS1_1DESCRIPTION,
                value);
    }

    /**
     * Removes a value of property Elements1_1Description given as an instance
     * of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
    }

    /**
     * Removes a value of property Elements1_1Description given as an instance
     * of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoElements1_1Description(Thing value) {
        Base.remove(this.model,
                this.getResource(),
                ELEMENTS1_1DESCRIPTION,
                value);
    }

    /**
     * Removes all values of property Elements1_1Description * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoElements1_1Description(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ELEMENTS1_1DESCRIPTION);
    }

    /**
     * Removes all values of property Elements1_1Description * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoElements1_1Description() {
        Base.removeAll(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@565e8588 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ELEMENTS1_1SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@565e8588 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoElements1_1Subject() {
        return Base.has(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@565e8588 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ELEMENTS1_1SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@565e8588 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoElements1_1Subject(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base
                .hasValue(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
    }

    /**
     * Get all values of property Elements1_1Subject as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoElements1_1Subject_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1SUBJECT);
    }

    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of
     * RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoElements1_1Subject_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ELEMENTS1_1SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Elements1_1Subject as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoElements1_1Subject_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                ELEMENTS1_1SUBJECT);
    }

    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of
     * RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoElements1_1Subject_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ELEMENTS1_1SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Elements1_1Subject * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoElements1_1Subject(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                ELEMENTS1_1SUBJECT,
                Thing.class);
    }

    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoElements1_1Subject_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                ELEMENTS1_1SUBJECT,
                Thing.class);
    }

    /**
     * Get all values of property Elements1_1Subject * @return a
     * ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoElements1_1Subject() {
        return Base.getAll(this.model,
                this.getResource(),
                ELEMENTS1_1SUBJECT,
                Thing.class);
    }

    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoElements1_1Subject_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                ELEMENTS1_1SUBJECT,
                Thing.class);
    }

    /**
     * Adds a value to property Elements1_1Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Adds a value to property Elements1_1Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoElements1_1Subject(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Adds a value to property Elements1_1Subject from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Adds a value to property Elements1_1Subject from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoElements1_1Subject(Thing value) {
        Base.add(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Sets a value of property Elements1_1Subject from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Sets a value of property Elements1_1Subject from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoElements1_1Subject(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Sets a value of property Elements1_1Subject from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Sets a value of property Elements1_1Subject from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoElements1_1Subject(Thing value) {
        Base.set(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Removes a value of property Elements1_1Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Removes a value of property Elements1_1Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoElements1_1Subject(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Removes a value of property Elements1_1Subject given as an instance of
     * Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Removes a value of property Elements1_1Subject given as an instance of
     * Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoElements1_1Subject(Thing value) {
        Base.remove(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
    }

    /**
     * Removes all values of property Elements1_1Subject * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoElements1_1Subject(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ELEMENTS1_1SUBJECT);
    }

    /**
     * Removes all values of property Elements1_1Subject * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoElements1_1Subject() {
        Base.removeAll(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@430ef1aa has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, IDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@430ef1aa has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoIdentifier() {
        return Base.has(this.model, this.getResource(), IDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@430ef1aa has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, IDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@430ef1aa has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoIdentifier(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), IDENTIFIER);
    }

    /**
     * Get all values of property Identifier as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoIdentifier_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, IDENTIFIER);
    }

    /**
     * Get all values of property Identifier as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoIdentifier_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                IDENTIFIER,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Identifier as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoIdentifier_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), IDENTIFIER);
    }

    /**
     * Get all values of property Identifier as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoIdentifier_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                IDENTIFIER,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Identifier * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, IDENTIFIER, Thing.class);
    }

    /**
     * Get all values of property Identifier as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoIdentifier_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, IDENTIFIER, Thing.class);
    }

    /**
     * Get all values of property Identifier * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoIdentifier() {
        return Base.getAll(this.model,
                this.getResource(),
                IDENTIFIER,
                Thing.class);
    }

    /**
     * Get all values of property Identifier as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoIdentifier_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                IDENTIFIER,
                Thing.class);
    }

    /**
     * Adds a value to property Identifier as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, IDENTIFIER, value);
    }

    /**
     * Adds a value to property Identifier as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoIdentifier(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), IDENTIFIER, value);
    }

    /**
     * Adds a value to property Identifier from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, IDENTIFIER, value);
    }

    /**
     * Adds a value to property Identifier from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoIdentifier(Thing value) {
        Base.add(this.model, this.getResource(), IDENTIFIER, value);
    }

    /**
     * Sets a value of property Identifier from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, IDENTIFIER, value);
    }

    /**
     * Sets a value of property Identifier from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoIdentifier(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), IDENTIFIER, value);
    }

    /**
     * Sets a value of property Identifier from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, IDENTIFIER, value);
    }

    /**
     * Sets a value of property Identifier from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoIdentifier(Thing value) {
        Base.set(this.model, this.getResource(), IDENTIFIER, value);
    }

    /**
     * Removes a value of property Identifier as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, IDENTIFIER, value);
    }

    /**
     * Removes a value of property Identifier as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoIdentifier(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), IDENTIFIER, value);
    }

    /**
     * Removes a value of property Identifier given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, IDENTIFIER, value);
    }

    /**
     * Removes a value of property Identifier given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoIdentifier(Thing value) {
        Base.remove(this.model, this.getResource(), IDENTIFIER, value);
    }

    /**
     * Removes all values of property Identifier * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, IDENTIFIER);
    }

    /**
     * Removes all values of property Identifier * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoIdentifier() {
        Base.removeAll(this.model, this.getResource(), IDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57d89cb4 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, INVERSEPROPERTY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57d89cb4 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoInverseProperty() {
        return Base.has(this.model, this.getResource(), INVERSEPROPERTY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57d89cb4 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, INVERSEPROPERTY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57d89cb4 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoInverseProperty(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), INVERSEPROPERTY);
    }

    /**
     * Get all values of property InverseProperty as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoInverseProperty_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, INVERSEPROPERTY);
    }

    /**
     * Get all values of property InverseProperty as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoInverseProperty_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                INVERSEPROPERTY,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property InverseProperty as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoInverseProperty_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                INVERSEPROPERTY);
    }

    /**
     * Get all values of property InverseProperty as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoInverseProperty_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                INVERSEPROPERTY,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property InverseProperty * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoInverseProperty(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                INVERSEPROPERTY,
                Thing.class);
    }

    /**
     * Get all values of property InverseProperty as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoInverseProperty_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                INVERSEPROPERTY,
                Thing.class);
    }

    /**
     * Get all values of property InverseProperty * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoInverseProperty() {
        return Base.getAll(this.model,
                this.getResource(),
                INVERSEPROPERTY,
                Thing.class);
    }

    /**
     * Get all values of property InverseProperty as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoInverseProperty_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                INVERSEPROPERTY,
                Thing.class);
    }

    /**
     * Adds a value to property InverseProperty as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, INVERSEPROPERTY, value);
    }

    /**
     * Adds a value to property InverseProperty as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoInverseProperty(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), INVERSEPROPERTY, value);
    }

    /**
     * Adds a value to property InverseProperty from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, INVERSEPROPERTY, value);
    }

    /**
     * Adds a value to property InverseProperty from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoInverseProperty(Thing value) {
        Base.add(this.model, this.getResource(), INVERSEPROPERTY, value);
    }

    /**
     * Sets a value of property InverseProperty from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, INVERSEPROPERTY, value);
    }

    /**
     * Sets a value of property InverseProperty from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoInverseProperty(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), INVERSEPROPERTY, value);
    }

    /**
     * Sets a value of property InverseProperty from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, INVERSEPROPERTY, value);
    }

    /**
     * Sets a value of property InverseProperty from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoInverseProperty(Thing value) {
        Base.set(this.model, this.getResource(), INVERSEPROPERTY, value);
    }

    /**
     * Removes a value of property InverseProperty as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, INVERSEPROPERTY, value);
    }

    /**
     * Removes a value of property InverseProperty as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoInverseProperty(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), INVERSEPROPERTY, value);
    }

    /**
     * Removes a value of property InverseProperty given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, INVERSEPROPERTY, value);
    }

    /**
     * Removes a value of property InverseProperty given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoInverseProperty(Thing value) {
        Base.remove(this.model, this.getResource(), INVERSEPROPERTY, value);
    }

    /**
     * Removes all values of property InverseProperty * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoInverseProperty(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, INVERSEPROPERTY);
    }

    /**
     * Removes all values of property InverseProperty * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoInverseProperty() {
        Base.removeAll(this.model, this.getResource(), INVERSEPROPERTY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25355ef9 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, LANGUAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25355ef9 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoLanguage() {
        return Base.has(this.model, this.getResource(), LANGUAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25355ef9 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, LANGUAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25355ef9 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoLanguage(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), LANGUAGE);
    }

    /**
     * Get all values of property Language as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLanguage_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, LANGUAGE);
    }

    /**
     * Get all values of property Language as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLanguage_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                LANGUAGE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Language as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLanguage_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), LANGUAGE);
    }

    /**
     * Get all values of property Language as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLanguage_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LANGUAGE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Language * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, LANGUAGE, Thing.class);
    }

    /**
     * Get all values of property Language as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoLanguage_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, LANGUAGE, Thing.class);
    }

    /**
     * Get all values of property Language * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoLanguage() {
        return Base.getAll(this.model,
                this.getResource(),
                LANGUAGE,
                Thing.class);
    }

    /**
     * Get all values of property Language as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoLanguage_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LANGUAGE,
                Thing.class);
    }

    /**
     * Adds a value to property Language as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, LANGUAGE, value);
    }

    /**
     * Adds a value to property Language as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoLanguage(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), LANGUAGE, value);
    }

    /**
     * Adds a value to property Language from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, LANGUAGE, value);
    }

    /**
     * Adds a value to property Language from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoLanguage(Thing value) {
        Base.add(this.model, this.getResource(), LANGUAGE, value);
    }

    /**
     * Sets a value of property Language from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, LANGUAGE, value);
    }

    /**
     * Sets a value of property Language from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoLanguage(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), LANGUAGE, value);
    }

    /**
     * Sets a value of property Language from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, LANGUAGE, value);
    }

    /**
     * Sets a value of property Language from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoLanguage(Thing value) {
        Base.set(this.model, this.getResource(), LANGUAGE, value);
    }

    /**
     * Removes a value of property Language as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, LANGUAGE, value);
    }

    /**
     * Removes a value of property Language as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoLanguage(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), LANGUAGE, value);
    }

    /**
     * Removes a value of property Language given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, LANGUAGE, value);
    }

    /**
     * Removes a value of property Language given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoLanguage(Thing value) {
        Base.remove(this.model, this.getResource(), LANGUAGE, value);
    }

    /**
     * Removes all values of property Language * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoLanguage(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, LANGUAGE);
    }

    /**
     * Removes all values of property Language * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoLanguage() {
        Base.removeAll(this.model, this.getResource(), LANGUAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192ce7c6 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, LICENSE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192ce7c6 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoLicense() {
        return Base.has(this.model, this.getResource(), LICENSE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192ce7c6 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, LICENSE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192ce7c6 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoLicense(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), LICENSE);
    }

    /**
     * Get all values of property License as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLicense_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, LICENSE);
    }

    /**
     * Get all values of property License as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLicense_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                LICENSE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property License as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLicense_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), LICENSE);
    }

    /**
     * Get all values of property License as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLicense_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LICENSE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property License * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, LICENSE, Thing.class);
    }

    /**
     * Get all values of property License as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoLicense_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, LICENSE, Thing.class);
    }

    /**
     * Get all values of property License * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoLicense() {
        return Base
                .getAll(this.model, this.getResource(), LICENSE, Thing.class);
    }

    /**
     * Get all values of property License as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoLicense_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LICENSE,
                Thing.class);
    }

    /**
     * Adds a value to property License as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, LICENSE, value);
    }

    /**
     * Adds a value to property License as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoLicense(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), LICENSE, value);
    }

    /**
     * Adds a value to property License from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, LICENSE, value);
    }

    /**
     * Adds a value to property License from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoLicense(Thing value) {
        Base.add(this.model, this.getResource(), LICENSE, value);
    }

    /**
     * Sets a value of property License from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, LICENSE, value);
    }

    /**
     * Sets a value of property License from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoLicense(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), LICENSE, value);
    }

    /**
     * Sets a value of property License from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, LICENSE, value);
    }

    /**
     * Sets a value of property License from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoLicense(Thing value) {
        Base.set(this.model, this.getResource(), LICENSE, value);
    }

    /**
     * Removes a value of property License as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, LICENSE, value);
    }

    /**
     * Removes a value of property License as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoLicense(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), LICENSE, value);
    }

    /**
     * Removes a value of property License given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, LICENSE, value);
    }

    /**
     * Removes a value of property License given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoLicense(Thing value) {
        Base.remove(this.model, this.getResource(), LICENSE, value);
    }

    /**
     * Removes all values of property License * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, LICENSE);
    }

    /**
     * Removes all values of property License * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoLicense() {
        Base.removeAll(this.model, this.getResource(), LICENSE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5abbfa4c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, LICENSETYPE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5abbfa4c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoLicenseType() {
        return Base.has(this.model, this.getResource(), LICENSETYPE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5abbfa4c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, LICENSETYPE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5abbfa4c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoLicenseType(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), LICENSETYPE);
    }

    /**
     * Get all values of property LicenseType as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLicenseType_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, LICENSETYPE);
    }

    /**
     * Get all values of property LicenseType as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLicenseType_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                LICENSETYPE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property LicenseType as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoLicenseType_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), LICENSETYPE);
    }

    /**
     * Get all values of property LicenseType as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoLicenseType_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LICENSETYPE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property LicenseType * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoLicenseType(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                LICENSETYPE,
                java.lang.String.class);
    }

    /**
     * Get all values of property LicenseType as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoLicenseType_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                LICENSETYPE,
                java.lang.String.class);
    }

    /**
     * Get all values of property LicenseType * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoLicenseType() {
        return Base.getAll(this.model,
                this.getResource(),
                LICENSETYPE,
                java.lang.String.class);
    }

    /**
     * Get all values of property LicenseType as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoLicenseType_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                LICENSETYPE,
                java.lang.String.class);
    }

    /**
     * Adds a value to property LicenseType as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, LICENSETYPE, value);
    }

    /**
     * Adds a value to property LicenseType as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoLicenseType(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), LICENSETYPE, value);
    }

    /**
     * Adds a value to property LicenseType from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, LICENSETYPE, value);
    }

    /**
     * Adds a value to property LicenseType from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoLicenseType(java.lang.String value) {
        Base.add(this.model, this.getResource(), LICENSETYPE, value);
    }

    /**
     * Sets a value of property LicenseType from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, LICENSETYPE, value);
    }

    /**
     * Sets a value of property LicenseType from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoLicenseType(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), LICENSETYPE, value);
    }

    /**
     * Sets a value of property LicenseType from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, LICENSETYPE, value);
    }

    /**
     * Sets a value of property LicenseType from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoLicenseType(java.lang.String value) {
        Base.set(this.model, this.getResource(), LICENSETYPE, value);
    }

    /**
     * Removes a value of property LicenseType as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, LICENSETYPE, value);
    }

    /**
     * Removes a value of property LicenseType as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoLicenseType(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), LICENSETYPE, value);
    }

    /**
     * Removes a value of property LicenseType given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, LICENSETYPE, value);
    }

    /**
     * Removes a value of property LicenseType given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoLicenseType(java.lang.String value) {
        Base.remove(this.model, this.getResource(), LICENSETYPE, value);
    }

    /**
     * Removes all values of property LicenseType * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoLicenseType(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, LICENSETYPE);
    }

    /**
     * Removes all values of property LicenseType * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoLicenseType() {
        Base.removeAll(this.model, this.getResource(), LICENSETYPE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1513e285 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, MAXCARDINALITY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1513e285 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoMaxCardinality() {
        return Base.has(this.model, this.getResource(), MAXCARDINALITY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1513e285 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, MAXCARDINALITY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1513e285 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoMaxCardinality(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), MAXCARDINALITY);
    }

    /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoMaxCardinality_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, MAXCARDINALITY);
    }

    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoMaxCardinality_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                MAXCARDINALITY,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoMaxCardinality_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                MAXCARDINALITY);
    }

    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoMaxCardinality_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                MAXCARDINALITY,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property MaxCardinality * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base
                .getAll(model, instanceResource, MAXCARDINALITY, Thing.class);
    }

    /**
     * Get all values of property MaxCardinality as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoMaxCardinality_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                MAXCARDINALITY,
                Thing.class);
    }

    /**
     * Get all values of property MaxCardinality * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoMaxCardinality() {
        return Base.getAll(this.model,
                this.getResource(),
                MAXCARDINALITY,
                Thing.class);
    }

    /**
     * Get all values of property MaxCardinality as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoMaxCardinality_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                MAXCARDINALITY,
                Thing.class);
    }

    /**
     * Adds a value to property MaxCardinality as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, MAXCARDINALITY, value);
    }

    /**
     * Adds a value to property MaxCardinality as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoMaxCardinality(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
    }

    /**
     * Adds a value to property MaxCardinality from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, MAXCARDINALITY, value);
    }

    /**
     * Adds a value to property MaxCardinality from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoMaxCardinality(Thing value) {
        Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
    }

    /**
     * Sets a value of property MaxCardinality from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, MAXCARDINALITY, value);
    }

    /**
     * Sets a value of property MaxCardinality from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoMaxCardinality(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
    }

    /**
     * Sets a value of property MaxCardinality from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, MAXCARDINALITY, value);
    }

    /**
     * Sets a value of property MaxCardinality from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoMaxCardinality(Thing value) {
        Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
    }

    /**
     * Removes a value of property MaxCardinality as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, MAXCARDINALITY, value);
    }

    /**
     * Removes a value of property MaxCardinality as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoMaxCardinality(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
    }

    /**
     * Removes a value of property MaxCardinality given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, MAXCARDINALITY, value);
    }

    /**
     * Removes a value of property MaxCardinality given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoMaxCardinality(Thing value) {
        Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
    }

    /**
     * Removes all values of property MaxCardinality * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoMaxCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, MAXCARDINALITY);
    }

    /**
     * Removes all values of property MaxCardinality * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoMaxCardinality() {
        Base.removeAll(this.model, this.getResource(), MAXCARDINALITY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d8f794f has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, MINCARDINALITY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d8f794f has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoMinCardinality() {
        return Base.has(this.model, this.getResource(), MINCARDINALITY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d8f794f has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, MINCARDINALITY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d8f794f has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoMinCardinality(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), MINCARDINALITY);
    }

    /**
     * Get all values of property MinCardinality as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoMinCardinality_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, MINCARDINALITY);
    }

    /**
     * Get all values of property MinCardinality as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoMinCardinality_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                MINCARDINALITY,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property MinCardinality as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoMinCardinality_asNode() {
        return Base.getAll_asNode(this.model,
                this.getResource(),
                MINCARDINALITY);
    }

    /**
     * Get all values of property MinCardinality as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoMinCardinality_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                MINCARDINALITY,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property MinCardinality * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base
                .getAll(model, instanceResource, MINCARDINALITY, Thing.class);
    }

    /**
     * Get all values of property MinCardinality as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoMinCardinality_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                MINCARDINALITY,
                Thing.class);
    }

    /**
     * Get all values of property MinCardinality * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoMinCardinality() {
        return Base.getAll(this.model,
                this.getResource(),
                MINCARDINALITY,
                Thing.class);
    }

    /**
     * Get all values of property MinCardinality as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoMinCardinality_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                MINCARDINALITY,
                Thing.class);
    }

    /**
     * Adds a value to property MinCardinality as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, MINCARDINALITY, value);
    }

    /**
     * Adds a value to property MinCardinality as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoMinCardinality(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), MINCARDINALITY, value);
    }

    /**
     * Adds a value to property MinCardinality from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, MINCARDINALITY, value);
    }

    /**
     * Adds a value to property MinCardinality from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoMinCardinality(Thing value) {
        Base.add(this.model, this.getResource(), MINCARDINALITY, value);
    }

    /**
     * Sets a value of property MinCardinality from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, MINCARDINALITY, value);
    }

    /**
     * Sets a value of property MinCardinality from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoMinCardinality(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), MINCARDINALITY, value);
    }

    /**
     * Sets a value of property MinCardinality from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, MINCARDINALITY, value);
    }

    /**
     * Sets a value of property MinCardinality from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoMinCardinality(Thing value) {
        Base.set(this.model, this.getResource(), MINCARDINALITY, value);
    }

    /**
     * Removes a value of property MinCardinality as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, MINCARDINALITY, value);
    }

    /**
     * Removes a value of property MinCardinality as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoMinCardinality(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
    }

    /**
     * Removes a value of property MinCardinality given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, MINCARDINALITY, value);
    }

    /**
     * Removes a value of property MinCardinality given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoMinCardinality(Thing value) {
        Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
    }

    /**
     * Removes all values of property MinCardinality * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoMinCardinality(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, MINCARDINALITY);
    }

    /**
     * Removes all values of property MinCardinality * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllNepoMinCardinality() {
        Base.removeAll(this.model, this.getResource(), MINCARDINALITY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fa9b92e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, NAOIDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fa9b92e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoNaoIdentifier() {
        return Base.has(this.model, this.getResource(), NAOIDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fa9b92e has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, NAOIDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fa9b92e has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoNaoIdentifier(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), NAOIDENTIFIER);
    }

    /**
     * Get all values of property NaoIdentifier as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNaoIdentifier_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, NAOIDENTIFIER);
    }

    /**
     * Get all values of property NaoIdentifier as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNaoIdentifier_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NAOIDENTIFIER,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NaoIdentifier as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNaoIdentifier_asNode() {
        return Base
                .getAll_asNode(this.model, this.getResource(), NAOIDENTIFIER);
    }

    /**
     * Get all values of property NaoIdentifier as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNaoIdentifier_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NAOIDENTIFIER,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NaoIdentifier * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, NAOIDENTIFIER, Thing.class);
    }

    /**
     * Get all values of property NaoIdentifier as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoNaoIdentifier_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NAOIDENTIFIER,
                Thing.class);
    }

    /**
     * Get all values of property NaoIdentifier * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoNaoIdentifier() {
        return Base.getAll(this.model,
                this.getResource(),
                NAOIDENTIFIER,
                Thing.class);
    }

    /**
     * Get all values of property NaoIdentifier as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoNaoIdentifier_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NAOIDENTIFIER,
                Thing.class);
    }

    /**
     * Adds a value to property NaoIdentifier as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, NAOIDENTIFIER, value);
    }

    /**
     * Adds a value to property NaoIdentifier as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoNaoIdentifier(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), NAOIDENTIFIER, value);
    }

    /**
     * Adds a value to property NaoIdentifier from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, NAOIDENTIFIER, value);
    }

    /**
     * Adds a value to property NaoIdentifier from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoNaoIdentifier(Thing value) {
        Base.add(this.model, this.getResource(), NAOIDENTIFIER, value);
    }

    /**
     * Sets a value of property NaoIdentifier from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, NAOIDENTIFIER, value);
    }

    /**
     * Sets a value of property NaoIdentifier from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoNaoIdentifier(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), NAOIDENTIFIER, value);
    }

    /**
     * Sets a value of property NaoIdentifier from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, NAOIDENTIFIER, value);
    }

    /**
     * Sets a value of property NaoIdentifier from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoNaoIdentifier(Thing value) {
        Base.set(this.model, this.getResource(), NAOIDENTIFIER, value);
    }

    /**
     * Removes a value of property NaoIdentifier as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, NAOIDENTIFIER, value);
    }

    /**
     * Removes a value of property NaoIdentifier as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoNaoIdentifier(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), NAOIDENTIFIER, value);
    }

    /**
     * Removes a value of property NaoIdentifier given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, NAOIDENTIFIER, value);
    }

    /**
     * Removes a value of property NaoIdentifier given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoNaoIdentifier(Thing value) {
        Base.remove(this.model, this.getResource(), NAOIDENTIFIER, value);
    }

    /**
     * Removes all values of property NaoIdentifier * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoNaoIdentifier(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, NAOIDENTIFIER);
    }

    /**
     * Removes all values of property NaoIdentifier * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoNaoIdentifier() {
        Base.removeAll(this.model, this.getResource(), NAOIDENTIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b4ec310 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, NIELICENSE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b4ec310 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoNieLicense() {
        return Base.has(this.model, this.getResource(), NIELICENSE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b4ec310 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, NIELICENSE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b4ec310 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoNieLicense(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), NIELICENSE);
    }

    /**
     * Get all values of property NieLicense as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNieLicense_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, NIELICENSE);
    }

    /**
     * Get all values of property NieLicense as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNieLicense_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NIELICENSE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NieLicense as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoNieLicense_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), NIELICENSE);
    }

    /**
     * Get all values of property NieLicense as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoNieLicense_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NIELICENSE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property NieLicense * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNepoNieLicense(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model,
                instanceResource,
                NIELICENSE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieLicense as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNepoNieLicense_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                NIELICENSE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieLicense * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNepoNieLicense() {
        return Base.getAll(this.model,
                this.getResource(),
                NIELICENSE,
                java.lang.String.class);
    }

    /**
     * Get all values of property NieLicense as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNepoNieLicense_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                NIELICENSE,
                java.lang.String.class);
    }

    /**
     * Adds a value to property NieLicense as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, NIELICENSE, value);
    }

    /**
     * Adds a value to property NieLicense as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoNieLicense(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), NIELICENSE, value);
    }

    /**
     * Adds a value to property NieLicense from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.add(model, instanceResource, NIELICENSE, value);
    }

    /**
     * Adds a value to property NieLicense from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoNieLicense(java.lang.String value) {
        Base.add(this.model, this.getResource(), NIELICENSE, value);
    }

    /**
     * Sets a value of property NieLicense from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, NIELICENSE, value);
    }

    /**
     * Sets a value of property NieLicense from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoNieLicense(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), NIELICENSE, value);
    }

    /**
     * Sets a value of property NieLicense from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.set(model, instanceResource, NIELICENSE, value);
    }

    /**
     * Sets a value of property NieLicense from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoNieLicense(java.lang.String value) {
        Base.set(this.model, this.getResource(), NIELICENSE, value);
    }

    /**
     * Removes a value of property NieLicense as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, NIELICENSE, value);
    }

    /**
     * Removes a value of property NieLicense as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoNieLicense(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), NIELICENSE, value);
    }

    /**
     * Removes a value of property NieLicense given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value) {
        Base.remove(model, instanceResource, NIELICENSE, value);
    }

    /**
     * Removes a value of property NieLicense given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoNieLicense(java.lang.String value) {
        Base.remove(this.model, this.getResource(), NIELICENSE, value);
    }

    /**
     * Removes all values of property NieLicense * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoNieLicense(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, NIELICENSE);
    }

    /**
     * Removes all values of property NieLicense * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoNieLicense() {
        Base.removeAll(this.model, this.getResource(), NIELICENSE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d40c244 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, PART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d40c244 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoPart() {
        return Base.has(this.model, this.getResource(), PART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d40c244 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, PART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d40c244 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoPart(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), PART);
    }

    /**
     * Get all values of property Part as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoPart_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, PART);
    }

    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoPart_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                PART,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Part as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoPart_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), PART);
    }

    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoPart_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                PART,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Part * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, PART, Thing.class);
    }

    /**
     * Get all values of property Part as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoPart_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, PART, Thing.class);
    }

    /**
     * Get all values of property Part * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoPart() {
        return Base.getAll(this.model, this.getResource(), PART, Thing.class);
    }

    /**
     * Get all values of property Part as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoPart_as() {
        return Base
                .getAll_as(this.model, this.getResource(), PART, Thing.class);
    }

    /**
     * Adds a value to property Part as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, PART, value);
    }

    /**
     * Adds a value to property Part as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoPart(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), PART, value);
    }

    /**
     * Adds a value to property Part from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, PART, value);
    }

    /**
     * Adds a value to property Part from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoPart(Thing value) {
        Base.add(this.model, this.getResource(), PART, value);
    }

    /**
     * Sets a value of property Part from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, PART, value);
    }

    /**
     * Sets a value of property Part from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoPart(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), PART, value);
    }

    /**
     * Sets a value of property Part from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, PART, value);
    }

    /**
     * Sets a value of property Part from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoPart(Thing value) {
        Base.set(this.model, this.getResource(), PART, value);
    }

    /**
     * Removes a value of property Part as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, PART, value);
    }

    /**
     * Removes a value of property Part as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoPart(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), PART, value);
    }

    /**
     * Removes a value of property Part given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, PART, value);
    }

    /**
     * Removes a value of property Part given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoPart(Thing value) {
        Base.remove(this.model, this.getResource(), PART, value);
    }

    /**
     * Removes all values of property Part * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoPart(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, PART);
    }

    /**
     * Removes all values of property Part * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllNepoPart() {
        Base.removeAll(this.model, this.getResource(), PART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c594008 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, RELATION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c594008 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoRelation() {
        return Base.has(this.model, this.getResource(), RELATION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c594008 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, RELATION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c594008 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoRelation(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), RELATION);
    }

    /**
     * Get all values of property Relation as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoRelation_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, RELATION);
    }

    /**
     * Get all values of property Relation as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoRelation_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                RELATION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Relation as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoRelation_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), RELATION);
    }

    /**
     * Get all values of property Relation as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoRelation_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                RELATION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Relation * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, RELATION, Thing.class);
    }

    /**
     * Get all values of property Relation as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoRelation_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, RELATION, Thing.class);
    }

    /**
     * Get all values of property Relation * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoRelation() {
        return Base.getAll(this.model,
                this.getResource(),
                RELATION,
                Thing.class);
    }

    /**
     * Get all values of property Relation as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoRelation_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                RELATION,
                Thing.class);
    }

    /**
     * Adds a value to property Relation as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, RELATION, value);
    }

    /**
     * Adds a value to property Relation as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoRelation(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), RELATION, value);
    }

    /**
     * Adds a value to property Relation from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, RELATION, value);
    }

    /**
     * Adds a value to property Relation from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoRelation(Thing value) {
        Base.add(this.model, this.getResource(), RELATION, value);
    }

    /**
     * Sets a value of property Relation from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, RELATION, value);
    }

    /**
     * Sets a value of property Relation from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoRelation(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), RELATION, value);
    }

    /**
     * Sets a value of property Relation from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, RELATION, value);
    }

    /**
     * Sets a value of property Relation from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoRelation(Thing value) {
        Base.set(this.model, this.getResource(), RELATION, value);
    }

    /**
     * Removes a value of property Relation as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, RELATION, value);
    }

    /**
     * Removes a value of property Relation as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoRelation(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), RELATION, value);
    }

    /**
     * Removes a value of property Relation given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, RELATION, value);
    }

    /**
     * Removes a value of property Relation given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoRelation(Thing value) {
        Base.remove(this.model, this.getResource(), RELATION, value);
    }

    /**
     * Removes all values of property Relation * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoRelation(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, RELATION);
    }

    /**
     * Removes all values of property Relation * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoRelation() {
        Base.removeAll(this.model, this.getResource(), RELATION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4ff561a7 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, RIGHTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4ff561a7 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoRights() {
        return Base.has(this.model, this.getResource(), RIGHTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4ff561a7 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, RIGHTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4ff561a7 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoRights(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), RIGHTS);
    }

    /**
     * Get all values of property Rights as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoRights_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, RIGHTS);
    }

    /**
     * Get all values of property Rights as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoRights_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                RIGHTS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Rights as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoRights_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), RIGHTS);
    }

    /**
     * Get all values of property Rights as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoRights_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                RIGHTS,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Rights * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, RIGHTS, Thing.class);
    }

    /**
     * Get all values of property Rights as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoRights_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, RIGHTS, Thing.class);
    }

    /**
     * Get all values of property Rights * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoRights() {
        return Base.getAll(this.model, this.getResource(), RIGHTS, Thing.class);
    }

    /**
     * Get all values of property Rights as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoRights_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                RIGHTS,
                Thing.class);
    }

    /**
     * Adds a value to property Rights as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, RIGHTS, value);
    }

    /**
     * Adds a value to property Rights as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoRights(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), RIGHTS, value);
    }

    /**
     * Adds a value to property Rights from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, RIGHTS, value);
    }

    /**
     * Adds a value to property Rights from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoRights(Thing value) {
        Base.add(this.model, this.getResource(), RIGHTS, value);
    }

    /**
     * Sets a value of property Rights from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, RIGHTS, value);
    }

    /**
     * Sets a value of property Rights from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoRights(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), RIGHTS, value);
    }

    /**
     * Sets a value of property Rights from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, RIGHTS, value);
    }

    /**
     * Sets a value of property Rights from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoRights(Thing value) {
        Base.set(this.model, this.getResource(), RIGHTS, value);
    }

    /**
     * Removes a value of property Rights as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, RIGHTS, value);
    }

    /**
     * Removes a value of property Rights as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoRights(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), RIGHTS, value);
    }

    /**
     * Removes a value of property Rights given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, RIGHTS, value);
    }

    /**
     * Removes a value of property Rights given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoRights(Thing value) {
        Base.remove(this.model, this.getResource(), RIGHTS, value);
    }

    /**
     * Removes all values of property Rights * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoRights(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, RIGHTS);
    }

    /**
     * Removes all values of property Rights * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoRights() {
        Base.removeAll(this.model, this.getResource(), RIGHTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57eaaca has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, SOURCE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57eaaca has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoSource() {
        return Base.has(this.model, this.getResource(), SOURCE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57eaaca has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, SOURCE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57eaaca has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoSource(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), SOURCE);
    }

    /**
     * Get all values of property Source as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoSource_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, SOURCE);
    }

    /**
     * Get all values of property Source as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoSource_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                SOURCE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Source as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoSource_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), SOURCE);
    }

    /**
     * Get all values of property Source as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoSource_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                SOURCE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Source * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, SOURCE, Thing.class);
    }

    /**
     * Get all values of property Source as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoSource_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, SOURCE, Thing.class);
    }

    /**
     * Get all values of property Source * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoSource() {
        return Base.getAll(this.model, this.getResource(), SOURCE, Thing.class);
    }

    /**
     * Get all values of property Source as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoSource_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                SOURCE,
                Thing.class);
    }

    /**
     * Adds a value to property Source as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, SOURCE, value);
    }

    /**
     * Adds a value to property Source as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoSource(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), SOURCE, value);
    }

    /**
     * Adds a value to property Source from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, SOURCE, value);
    }

    /**
     * Adds a value to property Source from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoSource(Thing value) {
        Base.add(this.model, this.getResource(), SOURCE, value);
    }

    /**
     * Sets a value of property Source from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, SOURCE, value);
    }

    /**
     * Sets a value of property Source from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoSource(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), SOURCE, value);
    }

    /**
     * Sets a value of property Source from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, SOURCE, value);
    }

    /**
     * Sets a value of property Source from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoSource(Thing value) {
        Base.set(this.model, this.getResource(), SOURCE, value);
    }

    /**
     * Removes a value of property Source as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, SOURCE, value);
    }

    /**
     * Removes a value of property Source as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoSource(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), SOURCE, value);
    }

    /**
     * Removes a value of property Source given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, SOURCE, value);
    }

    /**
     * Removes a value of property Source given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoSource(Thing value) {
        Base.remove(this.model, this.getResource(), SOURCE, value);
    }

    /**
     * Removes all values of property Source * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoSource(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, SOURCE);
    }

    /**
     * Removes all values of property Source * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoSource() {
        Base.removeAll(this.model, this.getResource(), SOURCE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1327d5a0 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, TERMSCREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1327d5a0 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoTermsCreated() {
        return Base.has(this.model, this.getResource(), TERMSCREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1327d5a0 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, TERMSCREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1327d5a0 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoTermsCreated(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), TERMSCREATED);
    }

    /**
     * Get all values of property TermsCreated as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsCreated_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, TERMSCREATED);
    }

    /**
     * Get all values of property TermsCreated as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsCreated_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                TERMSCREATED,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property TermsCreated as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsCreated_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), TERMSCREATED);
    }

    /**
     * Get all values of property TermsCreated as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsCreated_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                TERMSCREATED,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property TermsCreated * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, TERMSCREATED, Thing.class);
    }

    /**
     * Get all values of property TermsCreated as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoTermsCreated_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                TERMSCREATED,
                Thing.class);
    }

    /**
     * Get all values of property TermsCreated * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoTermsCreated() {
        return Base.getAll(this.model,
                this.getResource(),
                TERMSCREATED,
                Thing.class);
    }

    /**
     * Get all values of property TermsCreated as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoTermsCreated_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                TERMSCREATED,
                Thing.class);
    }

    /**
     * Adds a value to property TermsCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, TERMSCREATED, value);
    }

    /**
     * Adds a value to property TermsCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoTermsCreated(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), TERMSCREATED, value);
    }

    /**
     * Adds a value to property TermsCreated from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, TERMSCREATED, value);
    }

    /**
     * Adds a value to property TermsCreated from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoTermsCreated(Thing value) {
        Base.add(this.model, this.getResource(), TERMSCREATED, value);
    }

    /**
     * Sets a value of property TermsCreated from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, TERMSCREATED, value);
    }

    /**
     * Sets a value of property TermsCreated from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoTermsCreated(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), TERMSCREATED, value);
    }

    /**
     * Sets a value of property TermsCreated from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, TERMSCREATED, value);
    }

    /**
     * Sets a value of property TermsCreated from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoTermsCreated(Thing value) {
        Base.set(this.model, this.getResource(), TERMSCREATED, value);
    }

    /**
     * Removes a value of property TermsCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, TERMSCREATED, value);
    }

    /**
     * Removes a value of property TermsCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoTermsCreated(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), TERMSCREATED, value);
    }

    /**
     * Removes a value of property TermsCreated given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, TERMSCREATED, value);
    }

    /**
     * Removes a value of property TermsCreated given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoTermsCreated(Thing value) {
        Base.remove(this.model, this.getResource(), TERMSCREATED, value);
    }

    /**
     * Removes all values of property TermsCreated * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoTermsCreated(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, TERMSCREATED);
    }

    /**
     * Removes all values of property TermsCreated * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoTermsCreated() {
        Base.removeAll(this.model, this.getResource(), TERMSCREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@498e2a42 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, TERMSISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@498e2a42 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoTermsIsPartOf() {
        return Base.has(this.model, this.getResource(), TERMSISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@498e2a42 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, TERMSISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@498e2a42 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoTermsIsPartOf(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), TERMSISPARTOF);
    }

    /**
     * Get all values of property TermsIsPartOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsIsPartOf_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, TERMSISPARTOF);
    }

    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsIsPartOf_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                TERMSISPARTOF,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property TermsIsPartOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsIsPartOf_asNode() {
        return Base
                .getAll_asNode(this.model, this.getResource(), TERMSISPARTOF);
    }

    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsIsPartOf_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                TERMSISPARTOF,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property TermsIsPartOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, TERMSISPARTOF, Thing.class);
    }

    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoTermsIsPartOf_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                TERMSISPARTOF,
                Thing.class);
    }

    /**
     * Get all values of property TermsIsPartOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoTermsIsPartOf() {
        return Base.getAll(this.model,
                this.getResource(),
                TERMSISPARTOF,
                Thing.class);
    }

    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoTermsIsPartOf_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                TERMSISPARTOF,
                Thing.class);
    }

    /**
     * Adds a value to property TermsIsPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, TERMSISPARTOF, value);
    }

    /**
     * Adds a value to property TermsIsPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoTermsIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), TERMSISPARTOF, value);
    }

    /**
     * Adds a value to property TermsIsPartOf from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, TERMSISPARTOF, value);
    }

    /**
     * Adds a value to property TermsIsPartOf from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoTermsIsPartOf(Thing value) {
        Base.add(this.model, this.getResource(), TERMSISPARTOF, value);
    }

    /**
     * Sets a value of property TermsIsPartOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, TERMSISPARTOF, value);
    }

    /**
     * Sets a value of property TermsIsPartOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoTermsIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), TERMSISPARTOF, value);
    }

    /**
     * Sets a value of property TermsIsPartOf from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, TERMSISPARTOF, value);
    }

    /**
     * Sets a value of property TermsIsPartOf from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoTermsIsPartOf(Thing value) {
        Base.set(this.model, this.getResource(), TERMSISPARTOF, value);
    }

    /**
     * Removes a value of property TermsIsPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, TERMSISPARTOF, value);
    }

    /**
     * Removes a value of property TermsIsPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoTermsIsPartOf(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), TERMSISPARTOF, value);
    }

    /**
     * Removes a value of property TermsIsPartOf given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, TERMSISPARTOF, value);
    }

    /**
     * Removes a value of property TermsIsPartOf given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoTermsIsPartOf(Thing value) {
        Base.remove(this.model, this.getResource(), TERMSISPARTOF, value);
    }

    /**
     * Removes all values of property TermsIsPartOf * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoTermsIsPartOf(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, TERMSISPARTOF);
    }

    /**
     * Removes all values of property TermsIsPartOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoTermsIsPartOf() {
        Base.removeAll(this.model, this.getResource(), TERMSISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e18e546 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, TERMSVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e18e546 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoTermsVersion() {
        return Base.has(this.model, this.getResource(), TERMSVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e18e546 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, TERMSVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e18e546 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoTermsVersion(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), TERMSVERSION);
    }

    /**
     * Get all values of property TermsVersion as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsVersion_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, TERMSVERSION);
    }

    /**
     * Get all values of property TermsVersion as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsVersion_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                TERMSVERSION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property TermsVersion as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsVersion_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), TERMSVERSION);
    }

    /**
     * Get all values of property TermsVersion as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoTermsVersion_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                TERMSVERSION,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property TermsVersion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, TERMSVERSION, Thing.class);
    }

    /**
     * Get all values of property TermsVersion as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoTermsVersion_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                TERMSVERSION,
                Thing.class);
    }

    /**
     * Get all values of property TermsVersion * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoTermsVersion() {
        return Base.getAll(this.model,
                this.getResource(),
                TERMSVERSION,
                Thing.class);
    }

    /**
     * Get all values of property TermsVersion as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoTermsVersion_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                TERMSVERSION,
                Thing.class);
    }

    /**
     * Adds a value to property TermsVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, TERMSVERSION, value);
    }

    /**
     * Adds a value to property TermsVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoTermsVersion(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), TERMSVERSION, value);
    }

    /**
     * Adds a value to property TermsVersion from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, TERMSVERSION, value);
    }

    /**
     * Adds a value to property TermsVersion from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoTermsVersion(Thing value) {
        Base.add(this.model, this.getResource(), TERMSVERSION, value);
    }

    /**
     * Sets a value of property TermsVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, TERMSVERSION, value);
    }

    /**
     * Sets a value of property TermsVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoTermsVersion(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), TERMSVERSION, value);
    }

    /**
     * Sets a value of property TermsVersion from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, TERMSVERSION, value);
    }

    /**
     * Sets a value of property TermsVersion from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoTermsVersion(Thing value) {
        Base.set(this.model, this.getResource(), TERMSVERSION, value);
    }

    /**
     * Removes a value of property TermsVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, TERMSVERSION, value);
    }

    /**
     * Removes a value of property TermsVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoTermsVersion(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), TERMSVERSION, value);
    }

    /**
     * Removes a value of property TermsVersion given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, TERMSVERSION, value);
    }

    /**
     * Removes a value of property TermsVersion given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoTermsVersion(Thing value) {
        Base.remove(this.model, this.getResource(), TERMSVERSION, value);
    }

    /**
     * Removes all values of property TermsVersion * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoTermsVersion(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, TERMSVERSION);
    }

    /**
     * Removes all values of property TermsVersion * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoTermsVersion() {
        Base.removeAll(this.model, this.getResource(), TERMSVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63c5627c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63c5627c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNepoTitle() {
        return Base.has(this.model, this.getResource(), TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63c5627c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63c5627c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNepoTitle(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), TITLE);
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoTitle_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, TITLE);
    }

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoTitle_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model,
                instanceResource,
                TITLE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNepoTitle_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), TITLE);
    }

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNepoTitle_asNode_() {
        return Base.getAll_as(this.model,
                this.getResource(),
                TITLE,
                org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, TITLE, Thing.class);
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllNepoTitle_as(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, TITLE, Thing.class);
    }

    /**
     * Get all values of property Title * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNepoTitle() {
        return Base.getAll(this.model, this.getResource(), TITLE, Thing.class);
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllNepoTitle_as() {
        return Base.getAll_as(this.model,
                this.getResource(),
                TITLE,
                Thing.class);
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, TITLE, value);
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNepoTitle(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, TITLE, value);
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNepoTitle(Thing value) {
        Base.add(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, TITLE, value);
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNepoTitle(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, TITLE, value);
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNepoTitle(Thing value) {
        Base.set(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, TITLE, value);
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNepoTitle(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, TITLE, value);
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNepoTitle(Thing value) {
        Base.remove(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNepoTitle(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, TITLE);
    }

    /**
     * Removes all values of property Title * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNepoTitle() {
        Base.removeAll(this.model, this.getResource(), TITLE);
    }
}